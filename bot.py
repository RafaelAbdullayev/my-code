import whisperx
import os
import noisereduce as nr
import numpy as np
import logging
import json
import io
import sys
import sqlite3
import aiohttp
import uuid
import pytz
import locale
import asyncio
import aiofiles
import requests
import re
from pathlib import Path
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from calendar_client import add_event_to_calendar
# üìå –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º get_prompts_with_dates –∏–∑ llm_client –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
from llm_client import query_llm, set_model, get_model, get_prompts_with_dates as get_llm_prompts
from event_parser import (
    analyze_transcript,
    format_plan_response,
    format_today_response,
    format_tomorrow_response,
    format_last_week_response,
)
from transformers import GPT2LMHeadModel, GPT2Tokenizer
from pydub.silence import split_on_silence
from pydub import AudioSegment, effects
from datetime import datetime, timedelta
from logging.handlers import RotatingFileHandler
from aiogram.utils.keyboard import InlineKeyboardBuilder
from language_tool_python import LanguageTool

# === WhisperX Settings ===
import torch
torch.backends.cuda.matmul.allow_tf32 = True
torch.backends.cudnn.allow_tf32 = True
torch.cuda.empty_cache()

device = "cuda"

import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ WhisperX –º–æ–¥–µ–ª–∏
whisper_model = whisperx.load_model(
    "large-v3",
    device="cuda" if torch.cuda.is_available() else "cpu",
    compute_type="float16" if torch.cuda.is_available() else "float32",
    language="ru"
)

logger.info("‚úÖ –ú–æ–¥–µ–ª—å WhisperX –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è ===
tool = LanguageTool('ru-RU')

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ ===
def correct_grammar(text: str) -> str:
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ
    """
    try:
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ —Å –ø–æ–º–æ—â—å—é LanguageTool
        matches = tool.check(text)
        corrected_text = tool.correct(text)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä—É—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤
        corrections = {
            r'\b—Å (\w+[–æ–µ]–º)\b': r'—Å–æ \1',  # —Å —Å—Ç–∞—Å–æ–º -> —Å–æ —Å—Ç–∞—Å–æ–º
            r'\b—Å (\w+[–∏–µ]–π)\b': r'—Å \1',   # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã
            r'\b–≤ (\w+[–æ–µ]–º)\b': r'–≤–æ \1',  # –≤ –≤—Å–µ–º -> –≤–æ –≤—Å–µ–º
            r'(\w),(\w)': r'\1, \2',        # –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç—ã—Ö
            r'(\w)\.(\w)': r'\1. \2',       # –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ —Ç–æ—á–µ–∫
            r'\s+': ' ',                     # —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            r'\s([.,!?;:])': r'\1',          # —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            r'([a-zA-Z–∞-—è–ê-–Ø])([A-Z–ê-–Ø])': r'\1. \2'  # –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –º–µ–∂–¥—É –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏
        }
        
        for pattern, replacement in corrections.items():
            corrected_text = re.sub(pattern, replacement, corrected_text)
        
        return corrected_text.strip()
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏: {e}")
        return text  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

# === –£–¥–∞–ª–µ–Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è process_audio ===

# === Timezone, Locale ===
# === Timezone, Locale ===
# üìå –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã, –≤—ã—á–∏—Å–ª—è–≤—à–∏–µ—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
# –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º get_current_dates() –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞—Ç
tz = pytz.timezone("Europe/Moscow")
locale.setlocale(locale.LC_TIME, "ru_RU.UTF-8")


# === Load config ===
load_dotenv()
MODEL_NAME = "llama3:8b-instruct-q4_K_M"
os.chdir(os.path.dirname(os.path.abspath(__file__)))

with open('config.json', 'r', encoding='utf-8') as f:
    config = json.load(f)

TOKEN = config.get("telegram_token")
UPLOAD_DIR = Path(config.get("upload_dir", "upload"))
OUTPUT_DIR = Path(config.get("output_dir", "output"))
ALLOWED_USERS = set(config.get("allowed_users", []))
ADMINS = set(config.get("admins", []))

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

UPLOAD_DIR.mkdir(parents=True, exist_ok=True)
OUTPUT_DIR.mkdir(parents=True, exist_ok=True)

# === Database ===
db_path = "bot_data.db"
conn = sqlite3.connect(db_path)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, full_name TEXT);''')
cursor.execute('''CREATE TABLE IF NOT EXISTS files (id INTEGER PRIMARY KEY, user_id INTEGER, file_name TEXT, file_path TEXT, transcribed_text TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (user_id) REFERENCES users (id));''')
conn.commit()

# === Bot Setup ===
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
admin_state = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

MAX_CHUNK_LENGTH_MS = 60 * 1000  # 1 –º–∏–Ω—É—Ç–∞

def is_allowed(user_id: int) -> bool:
    return user_id in ALLOWED_USERS

def save_user_info(user_id: int, username: str, full_name: str):
    cursor.execute(
        'INSERT OR IGNORE INTO users (id, username, full_name) VALUES (?, ?, ?)',
        (user_id, username, full_name)
    )
    conn.commit()

def save_file_info(user_id: int, file_name: str, file_path: str, transcribed_text: str):
    cursor.execute(
        'INSERT INTO files (user_id, file_name, file_path, transcribed_text) VALUES (?, ?, ?, ?)',
        (user_id, file_name, file_path, transcribed_text)
    )
    conn.commit()

def save_transcription_to_file(transcribed_text: str, file_name: str):
    output_file = OUTPUT_DIR / f"{file_name}.txt"
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(transcribed_text)
    logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {output_file}")
    
def convert_to_wav(input_path: str) -> str:
    ext = Path(input_path).suffix.lower()
    if ext == ".wav":
        return input_path
    
    audio = AudioSegment.from_file(input_path)
    wav_path = str(Path(input_path).with_suffix(".wav"))
    audio.export(wav_path, format="wav")
    audio = audio.set_frame_rate(16000)
    return wav_path

def normalize_and_amplify(audio: AudioSegment) -> AudioSegment:
    audio = effects.normalize(audio)
    target_dBFS = -18.0
    change_in_dBFS = target_dBFS - audio.dBFS
    return audio.apply_gain(change_in_dBFS)

def analyze_audio(audio: AudioSegment):
    rms = audio.rms
    if rms == 0:
        snr = float('-inf')
    else:
        snr = 20 * np.log10(rms / 1e-6)
    logger.info(f"[–ê—É–¥–∏–æ] RMS: {rms}, SNR: {snr:.2f} dB")

def remove_silence(audio: AudioSegment, keep_silence=500):
    dBFS = audio.dBFS
    silence_thresh = dBFS - 14
    return split_on_silence(audio, min_silence_len=700, silence_thresh=silence_thresh, keep_silence=keep_silence)

def split_long_chunk(chunk: AudioSegment, max_length: int = MAX_CHUNK_LENGTH_MS):
    return [chunk[i:i + max_length] for i in range(0, len(chunk), max_length)]

def reduce_noise(audio: AudioSegment) -> AudioSegment:
    try:
        samples = np.array(audio.get_array_of_samples())
        
        if len(samples) == 0:
            return audio
            
        # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
        reduced = nr.reduce_noise(
            y=samples, 
            sr=audio.frame_rate, 
            prop_decrease=0.9,  # –±–æ–ª–µ–µ —Å–∏–ª—å–Ω–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
            time_constant_s=2.0,
            freq_mask_smooth_hz=500,
            time_mask_smooth_ms=50
        )
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–ª–∏–ø–ø–∏–Ω–≥–∞
        reduced = np.clip(reduced, -32768, 32767)
        reduced = reduced.astype(np.int16)
        
        return AudioSegment(
            reduced.tobytes(),
            frame_rate=audio.frame_rate,
            sample_width=2,
            channels=1
        )
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –®—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ: {e}")
        return audio

# –£–¥–∞–ª–µ–Ω–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è process_audio_async
async def process_audio(file_path: str) -> str:
    try:
        wav_file_path = convert_to_wav(file_path)
        audio = AudioSegment.from_file(wav_file_path)
        
        # === –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–ï–û–ë–†–ê–ë–û–¢–ö–ê –ê–£–î–ò–û ===
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –º–æ–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        if audio.channels > 1:
            audio = audio.set_channels(1)
            
        # –†–µ—Å–µ–º–ø–ª–∏–Ω–≥ –¥–æ 16kHz (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è Whisper)
        if audio.frame_rate != 16000:
            audio = audio.set_frame_rate(16000)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        audio = effects.normalize(audio)
        
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º —Ç–∏—Ö–æ
        if audio.dBFS < -20:
            gain = min(10, -20 - audio.dBFS)  # –º–∞–∫—Å–∏–º—É–º +10dB
            audio = audio.apply_gain(gain)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ
        processed_path = f"{wav_file_path}_processed.wav"
        audio.export(processed_path, format="wav")
        
        # === –£–õ–£–ß–®–ï–ù–ù–û–ï –†–ê–ó–î–ï–õ–ï–ù–ò–ï –ù–ê –ß–ê–ù–ö–ò ===
        chunks = split_on_silence(
            audio,
            min_silence_len=700,  # –¥–ª–∏–Ω–∞ —Ç–∏—à–∏–Ω—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            silence_thresh=audio.dBFS - 16,  # –ø–æ—Ä–æ–≥ —Ç–∏—à–∏–Ω—ã
            keep_silence=300  # –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ —Ç–∏—à–∏–Ω—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        )
        
        # –ï—Å–ª–∏ —á–∞–Ω–∫–æ–≤ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –º–µ–ª–∫–∏–µ
        if len(chunks) > 15:
            combined_chunks = []
            current_chunk = AudioSegment.empty()
            for chunk in chunks:
                if len(current_chunk) + len(chunk) < 45000:  # 45 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å
                    current_chunk += chunk
                else:
                    if len(current_chunk) > 3000:  # –º–∏–Ω–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã
                        combined_chunks.append(current_chunk)
                    current_chunk = chunk
            if len(current_chunk) > 3000:
                combined_chunks.append(current_chunk)
            chunks = combined_chunks

        full_transcription = ""

        for idx, chunk in enumerate(chunks):
            chunk_path = f"{wav_file_path}_part{idx}.wav"
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞
            chunk = effects.normalize(chunk)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞–Ω–∫
            chunk.export(chunk_path, format="wav")

            try:
                # === –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ WHISPER ===
                # –î–ª—è FasterWhisper —É–±–∏—Ä–∞–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                result = whisper_model.transcribe(
                    chunk_path, 
                    batch_size=8,
                    language='ru'
                    # temperature –∏ condition_on_previous_text –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
                )

                # === –í–´–†–ê–í–ù–ò–í–ê–ù–ò–ï ===
                try:
                    align_model, metadata = whisperx.load_align_model(
                        language_code="ru", 
                        device=device
                    )
                    result_aligned = whisperx.align(
                        result["segments"],
                        align_model,
                        metadata,
                        chunk_path,
                        device=device
                    )
                    segments = result_aligned["segments"]
                except Exception as align_error:
                    logger.warning(f"‚ö†Ô∏è –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {align_error}")
                    segments = result["segments"]

                for segment in segments:
                    text = segment["text"].strip()
                    if text and len(text) > 1:  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∏ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã
                        full_transcription += text + " "

            except Exception as whisper_err:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è {chunk_path}: {whisper_err}")
                # Fallback: –ø—Ä–æ—Å—Ç–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –±–µ–∑ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
                try:
                    result = whisper_model.transcribe(chunk_path, language='ru')
                    for segment in result["segments"]:
                        text = segment["text"].strip()
                        if text:
                            full_transcription += text + " "
                except Exception as fallback_err:
                    logger.error(f"‚ùå Fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {fallback_err}")

            finally:
                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                if os.path.exists(chunk_path):
                    os.remove(chunk_path)

        # –û—á–∏—Å—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if os.path.exists(processed_path):
            os.remove(processed_path)

        # === –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–û–°–¢–û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ===
        if not full_transcription.strip():
            logger.warning("‚ö†Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø—É—Å—Ç–∞—è, –ø—Ä–æ–±—É–µ–º –ø–æ–ª–Ω–æ–µ –∞—É–¥–∏–æ...")
            # Fallback: –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Å—ë –∞—É–¥–∏–æ —Ü–µ–ª–∏–∫–æ–º
            try:
                result = whisper_model.transcribe(wav_file_path, language='ru')
                for segment in result["segments"]:
                    text = segment["text"].strip()
                    if text:
                        full_transcription += text + " "
            except Exception as full_err:
                logger.error(f"‚ùå –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ: {full_err}")
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ"

        full_transcription = re.sub(r'\s+', ' ', full_transcription).strip()
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        corrections = {
            r'\b–ø–∏—Ç–µ–π\b': '–ü–µ—Ç–µ–π',
            r'\b–ø–∏—Ç—è\b': '–ü–µ—Ç—è',
            r'\b–¥—É–ª–º–æ–π\b': '–î—É–ª–º–æ–π',
            r'\b–¥–∏–º–∞\b': '–î—É–ª–º–∞',
            r'\b–º–∞—Ä–∏–µ–π\b': '–ú–∞—Ä–∏—è',
            r'\b–º–∞–∫—Å\b': '–ú–∞–∫—Å–æ–º',
            r'\b–∞–Ω–∂–µ–ª–∏–∫–∞\b': '–ê–Ω–∂–µ–ª–∏–∫–æ–π',
            r'\b–≥–µ–Ω—à–∏–Ω\b': 'Genshin Impact',
            r'\b–¥–æ—Ç–∞\b': 'Dota',
            r'\b—Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–º\b': '—Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º',
            r'\b—Å —Ç–∞—Å–æ–º\b': '—Å–æ –°—Ç–∞—Å–æ–º',
            r'\b—Å–æ —Å—Ç–∞—Å–∞–º\b': '—Å–æ –°—Ç–∞—Å–æ–º',
            r'\b—è–Ω–¥–µ–∫—Å\b': '–Ø–Ω–¥–µ–∫—Å',
            r'\b—Å–±–µ—Ä–æ–º\b': '–°–±–µ—Ä–æ–º',
            r'\b–≥–∞–∑–ø—Ä–æ–º\b': '–ì–∞–∑–ø—Ä–æ–º',
            r'\bhr\b': 'HR',
            r'\bcrm\b': 'CRM',
            r'\b—Ç–∑\b': '–¢–ó',
            r'\.(\d{1,2})': r':\1',  # 9.30 -> 9:30
            r'(\d):(\d{2})': r'\1:\2',  # 9:30 -> 9:30
        }

        for wrong, right in corrections.items():
            full_transcription = re.sub(wrong, right, full_transcription, flags=re.IGNORECASE)

        # === –ì–†–ê–ú–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ö–û–†–†–ï–ö–¶–ò–Ø ===
        logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏...")
        try:
            full_transcription = correct_grammar(full_transcription)
        except Exception as grammar_err:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏: {grammar_err}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏

        # –£–ª—É—á—à–µ–Ω–∏–µ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
        full_transcription = re.sub(r'(\w)([–ê-–ØA-Z])', r'\1. \2', full_transcription)
        full_transcription = re.sub(r'\s+\.', '.', full_transcription)
        full_transcription = re.sub(r',\s*,', ',', full_transcription)

        logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–ª–∏–Ω–∞: {len(full_transcription)} —Å–∏–º–≤–æ–ª–æ–≤")
        return full_transcription.strip()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_audio: {e}", exc_info=True)
        raise

def convert_google_drive_link(url: str) -> str:
    match = re.search(r'd/([a-zA-Z0-9_-]+)', url)
    if match:
        file_id = match.group(1)
        return f'https://drive.google.com/uc?export=download&id={file_id}'
    else:
        return url

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —á–∞—Å—Ç—è–º–∏ ===
async def send_long_text(message: Message, text: str, chunk_size: int = 4096):
    for i in range(0, len(text), chunk_size):
        await message.answer(text[i:i + chunk_size])

@dp.message(lambda message: message.text and message.text.startswith("http"))
async def handle_audio_link(message: Message):
    if not is_allowed(message.from_user.id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    url = convert_google_drive_link(message.text.strip())
    await message.answer("üîó –ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞. –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª...")

    user_id = message.from_user.id
    save_user_info(user_id, message.from_user.username or "", message.from_user.full_name or "")
    filename = f"{uuid.uuid4().hex}.mp3"
    local_path = UPLOAD_DIR / filename

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")
                    return
                async with aiofiles.open(local_path, 'wb') as f:
                    await f.write(await resp.read())

        await message.answer("üîä –ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

        transcription = await process_audio(str(local_path))
        save_file_info(user_id, filename, str(local_path), transcription)
        save_transcription_to_file(transcription, filename)
        await message.answer(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {len(transcription.split())}")
        await send_long_text(message, f"<b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:</b>\n\n{transcription}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@dp.message(F.voice)
async def handle_voice_message(message: Message):
    if not is_allowed(message.from_user.id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        voice = message.voice
        file = await bot.get_file(voice.file_id)
        file_path = file.file_path
        file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_path}"

        filename = f"{uuid.uuid4().hex}.ogg"
        local_path = UPLOAD_DIR / filename

        await message.answer("üîä –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –°–∫–∞—á–∏–≤–∞—é...")

        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as resp:
                if resp.status == 200:
                    async with aiofiles.open(local_path, 'wb') as f:
                        await f.write(await resp.read())

        await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ...")

        transcription = await process_audio(str(local_path))
        save_file_info(message.from_user.id, filename, str(local_path), transcription)
        save_transcription_to_file(transcription, filename)

        await message.answer(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {len(transcription.split())}")

        if len(transcription) <= 4000:
            await message.answer(transcription)
        else:
            await message.answer("üìã –¢–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é —á–∞—Å—Ç—è–º–∏...")
            await send_long_text(message, f"<b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:</b>\n\n{transcription}")

        # –ö–Ω–æ–ø–∫–∞
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üìã –ü–æ–∫–∞–∂–∏ –≤—Å—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é")]],
            resize_keyboard=True
        )
        await message.answer("üëÜ –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤—Å—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é:", reply_markup=keyboard)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

# === –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∂–∏ –≤—Å—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é" ===
@dp.message(lambda message: message.text == "üìã –ü–æ–∫–∞–∂–∏ –≤—Å—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é")
async def handle_show_transcription(message: Message):
    if not is_allowed(message.from_user.id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    cursor.execute(
        'SELECT transcribed_text FROM files WHERE user_id = ? ORDER BY timestamp DESC LIMIT 1',
        (message.from_user.id,)
    )
    row = cursor.fetchone()

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if not row or not row[0] or not row[0].strip():
        await message.answer("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª.")
        return

    await message.answer("<b>–í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:</b>")
    await send_long_text(message, row[0])

    transcribed_text = row[0]

    try:
        analysis = analyze_transcript(transcribed_text, tz)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}", exc_info=True)
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –µ—â—ë —Ä–∞–∑.")
        return

    await message.answer("‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á...")
    plan_text = format_plan_response(analysis)
    if len(plan_text) > 4000:
        await send_long_text(message, plan_text)
    else:
        await message.answer(plan_text)

    await message.answer("‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å—Ç—Ä–µ—á —Å–µ–≥–æ–¥–Ω—è...")
    today_text = format_today_response(analysis)
    if len(today_text) > 4000:
        await send_long_text(message, today_text)
    else:
        await message.answer(today_text)

    await message.answer("‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å—Ç—Ä–µ—á –∑–∞–≤—Ç—Ä–∞...")
    tomorrow_text = format_tomorrow_response(analysis)
    if len(tomorrow_text) > 4000:
        await send_long_text(message, tomorrow_text)
    else:
        await message.answer(tomorrow_text)

    await message.answer("‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é...")
    last_week_text = format_last_week_response(analysis)
    if len(last_week_text) > 4000:
        await send_long_text(message, last_week_text)
    else:
        await message.answer(last_week_text)

@dp.message(lambda message: message.text == "üìù –ß—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å?")
async def handle_plan(message: Message):
    if not is_allowed(message.from_user.id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    cursor.execute('SELECT transcribed_text FROM files WHERE user_id = ? ORDER BY timestamp DESC LIMIT 1', (message.from_user.id,))
    row = cursor.fetchone()
    if row is None or not row[0].strip():
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    transcribed_text = row[0]
    await message.answer("‚è≥ –°–æ–±–∏—Ä–∞—é —Å–æ–±—ã—Ç–∏—è –∏ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")

    try:
        # ‚úÖ –ù–æ–≤—ã–π –Ω–∞–¥—ë–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –≤–º–µ—Å—Ç–æ LLM
        analysis = analyze_transcript(transcribed_text, tz)
        response_text = format_plan_response(analysis)
        if len(response_text) > 4000:
            await send_long_text(message, response_text)
        else:
            await message.answer(response_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø–∏—Å—å –µ—â—ë —Ä–∞–∑."
        )

@dp.message(lambda message: message.text == "üë• –° –∫–µ–º —è —Å–µ–≥–æ–¥–Ω—è –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è?")
async def handle_meetings_today(message: Message):
    if not is_allowed(message.from_user.id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    cursor.execute('SELECT transcribed_text FROM files WHERE user_id = ? ORDER BY timestamp DESC LIMIT 1', (message.from_user.id,))
    row = cursor.fetchone()
    if row is None or not row[0].strip():
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    transcribed_text = row[0]
    await message.answer("‚è≥ –ò—â—É –≤—Å—Ç—Ä–µ—á–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å...")

    try:
        analysis = analyze_transcript(transcribed_text, tz)
        response_text = format_today_response(analysis)
        if len(response_text) > 4000:
            await send_long_text(message, response_text)
        else:
            await message.answer(response_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å—Ç—Ä–µ—á —Å–µ–≥–æ–¥–Ω—è: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å –≤—Å—Ç—Ä–µ—á–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –∏–ª–∏ –≤—Ä–µ–º—è –≤ —Ç–µ–∫—Å—Ç–µ."
        )

@dp.message(lambda message: message.text == "üìÖ –ö–∞–∫–æ–π –ø–ª–∞–Ω –≤—Å—Ç—Ä–µ—á —É –º–µ–Ω—è –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≤—Ç—Ä–∞?")
async def handle_meetings_tomorrow(message: Message):
    if not is_allowed(message.from_user.id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    cursor.execute('SELECT transcribed_text FROM files WHERE user_id = ? ORDER BY timestamp DESC LIMIT 1', (message.from_user.id,))
    row = cursor.fetchone()
    if not row or not row[0].strip():
        await message.answer("üì≠ –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ.")
        return

    transcribed_text = row[0]
    await message.answer("‚è≥ –°–æ–±–∏—Ä–∞—é –≤—Å—Ç—Ä–µ—á–∏, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞...")

    try:
        analysis = analyze_transcript(transcribed_text, tz)
        response_text = format_tomorrow_response(analysis)
        if len(response_text) > 4000:
            await send_long_text(message, response_text)
        else:
            await message.answer(response_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å—Ç—Ä–µ—á –∑–∞–≤—Ç—Ä–∞: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–ª–∞–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Å–ª–æ–≤–∞ ¬´–∑–∞–≤—Ç—Ä–∞¬ª –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞."
        )

@dp.message(lambda message: message.text == "üïí –ö–∞–∫–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –±—ã–ª–∏ –Ω–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ?")
async def handle_meetings_last_week(message: Message):
    if not is_allowed(message.from_user.id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    cursor.execute('SELECT transcribed_text FROM files WHERE user_id = ? ORDER BY timestamp DESC LIMIT 1', (message.from_user.id,))
    row = cursor.fetchone()
    if not row or not row[0].strip():
        await message.answer("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    transcribed_text = row[0]
    await message.answer("‚è≥ –ò—â—É —Å–æ–±—ã—Ç–∏—è –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é...")

    try:
        analysis = analyze_transcript(transcribed_text, tz)
        response_text = format_last_week_response(analysis)
        if len(response_text) > 4000:
            await send_long_text(message, response_text)
        else:
            await message.answer(response_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏ –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ç–µ–∫—Å—Ç–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏."
        )

@dp.message(lambda message: message.text == "üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –∞–Ω–∞–ª–∏–∑")
async def handle_repeat_full_analysis(message: Message):
    if not is_allowed(message.from_user.id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    cursor.execute('SELECT transcribed_text FROM files WHERE user_id = ? ORDER BY timestamp DESC LIMIT 1', (message.from_user.id,))
    row = cursor.fetchone()
    if not row or not row[0].strip():
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.")
        return

    transcribed_text = row[0]

    try:
        analysis = analyze_transcript(transcribed_text, tz)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞: {e}", exc_info=True)
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –∑–∞–ø–∏—Å—å.")
        return

    await message.answer("‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á...")
    plan_text = format_plan_response(analysis)
    if len(plan_text) > 4000:
        await send_long_text(message, plan_text)
    else:
        await message.answer(plan_text)

    await message.answer("‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å—Ç—Ä–µ—á —Å–µ–≥–æ–¥–Ω—è...")
    today_text = format_today_response(analysis)
    if len(today_text) > 4000:
        await send_long_text(message, today_text)
    else:
        await message.answer(today_text)

    await message.answer("‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å—Ç—Ä–µ—á –∑–∞–≤—Ç—Ä–∞...")
    tomorrow_text = format_tomorrow_response(analysis)
    if len(tomorrow_text) > 4000:
        await send_long_text(message, tomorrow_text)
    else:
        await message.answer(tomorrow_text)

    await message.answer("‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é...")
    last_week_text = format_last_week_response(analysis)
    if len(last_week_text) > 4000:
        await send_long_text(message, last_week_text)
    else:
        await message.answer(last_week_text)

@dp.message(lambda message: message.text == "üìå –î–æ–±–∞–≤—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
async def handle_add_to_calendar(message: Message):
    if not is_allowed(message.from_user.id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    cursor.execute('SELECT transcribed_text FROM files WHERE user_id = ? ORDER BY timestamp DESC LIMIT 1', (message.from_user.id,))
    row = cursor.fetchone()
    if not row or not row[0].strip():
        await message.answer("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    transcribed_text = row[0]
    await message.answer("üìÜ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å...")

    try:
        tasks = query_llm(transcribed_text, mode="todo")
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if not tasks or not tasks.strip() or any(phrase in tasks.lower() for phrase in ["–Ω–µ—Ç –∑–∞–¥–∞—á", "–Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π", "—Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", "–∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", "–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"]):
            await message.answer("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.")
            return

        now = datetime.now(tz)
        confirmations = []
        task_count = 0
        
        for i, line in enumerate(tasks.splitlines()):
            task = line.strip("-‚Ä¢ ").strip()
            if not task or len(task) < 3:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–¥–∞—á–∏
                continue
            start_time = now + timedelta(hours=i+1)
            try:
                url = add_event_to_calendar(task, start_time)
                confirmations.append(f"‚úÖ <b>{task}</b> ‚Äî <a href='{url}'>–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ</a>")
                task_count += 1
            except Exception as calendar_err:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å: {calendar_err}")
                confirmations.append(f"‚ùå <b>{task}</b> ‚Äî –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")

        if task_count == 0:
            await message.answer("üì≠ –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.")
        else:
            await message.answer("\n".join(confirmations), parse_mode=ParseMode.HTML)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á.")

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    if not is_allowed(message.from_user.id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    # –°–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –ß—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å?")],
            [KeyboardButton(text="üë• –° –∫–µ–º —è —Å–µ–≥–æ–¥–Ω—è –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è?")],
            [KeyboardButton(text="üìÖ –ö–∞–∫–æ–π –ø–ª–∞–Ω –≤—Å—Ç—Ä–µ—á —É –º–µ–Ω—è –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≤—Ç—Ä–∞?")],
            [KeyboardButton(text="üïí –ö–∞–∫–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –±—ã–ª–∏ –Ω–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ?")],
            [KeyboardButton(text="üìå –î–æ–±–∞–≤—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å")],
            [KeyboardButton(text="üìã –ü–æ–∫–∞–∂–∏ –≤—Å—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é")],
            [KeyboardButton(text="üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –∞–Ω–∞–ª–∏–∑")],
            [KeyboardButton(text="üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")],
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
        f"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤—Å—Ç—Ä–µ—á –∏ –∑–∞–¥–∞—á –ø–æ –∞—É–¥–∏–æ.",
        reply_markup=keyboard
    )

# === –ö–æ–º–∞–Ω–¥–∞ /help ===
@dp.message(F.text == "/help")
async def cmd_help(message: Message):
    if not is_allowed(message.from_user.id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    help_text = (
        "ü§ñ **–Ø ‚Äî –≤–∞—à –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫!**\n\n"
        "**–ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é:**\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª.\n"
        "2. –Ø —Ä–∞—Å—à–∏—Ñ—Ä—É—é –µ–≥–æ –∏ –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞.\n\n"
        "**–ß—Ç–æ —è —É–º–µ—é:**\n"
        "‚Ä¢ **üìù –ß—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å?** ‚Äî –ù–∞—Ö–æ–∂—É –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏.\n"
        "‚Ä¢ **üë• –° –∫–µ–º —è —Å–µ–≥–æ–¥–Ω—è –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è?** ‚Äî –í—ã–≤–æ–∂—É –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
        "‚Ä¢ **üìÖ –ö–∞–∫–æ–π –ø–ª–∞–Ω –≤—Å—Ç—Ä–µ—á —É –º–µ–Ω—è –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≤—Ç—Ä–∞?** ‚Äî –ü–æ–∫–∞–∑—ã–≤–∞—é –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.\n"
        "‚Ä¢ **üïí –ö–∞–∫–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –±—ã–ª–∏ –Ω–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ?** ‚Äî –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Å—Ç—Ä–µ—á–∏ –∑–∞ –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é.\n"
        "‚Ä¢ **üìå –î–æ–±–∞–≤—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å** ‚Äî –°–æ–∑–¥–∞—é —Å–æ–±—ã—Ç–∏—è –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä–µ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞).\n"
        "‚Ä¢ **üìã –ü–æ–∫–∞–∂–∏ –≤—Å—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é** ‚Äî –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏.\n"
        "‚Ä¢ **üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –∞–Ω–∞–ª–∏–∑** ‚Äî –ü–æ–≤—Ç–æ—Ä—è—é –∞–Ω–∞–ª–∏–∑ –ø–æ –≤—Å–µ–º –ø—É–Ω–∫—Ç–∞–º.\n"
    )
    await message.answer(help_text, parse_mode=ParseMode.MARKDOWN)

# === –ö–æ–º–∞–Ω–¥–∞ /support ===
@dp.message(F.text == "/support")
async def cmd_support(message: Message):
    if not is_allowed(message.from_user.id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    support_text = (
    "üÜò **–°–ª—É–∂–±–∞ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ë–æ—Ç–∞**\n\n"
    "–í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã? –ü–∏—à–∏—Ç–µ –ø—Ä—è–º–æ –º–Ω–µ, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É! üòÑ\n\n"
    "üì± **WhatsApp:** +994 55 434 50 06\n"
    "üì± **MAX:** +7 996 687 24 20\n"
    "‚úâÔ∏è **Email:** djigit1220@gmail.com\n"
    "üí¨ **Telegram:** @Rafael005t"
    )
    await message.answer(support_text, parse_mode=ParseMode.MARKDOWN)

@dp.message(F.text.in_({"/admin", "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"}))
async def admin_panel(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_add")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_remove")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_list")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Ñ–∞–π–ª–æ–≤", callback_data="admin_clear_cache")],
        [InlineKeyboardButton(text="üìÉ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å bot.log", callback_data="admin_view_log_bot")],
        [InlineKeyboardButton(text="‚ùå –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å error.log", callback_data="admin_view_log_error")],
        [InlineKeyboardButton(text="‚ôª –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞", callback_data="admin_restart")],
        [InlineKeyboardButton(text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="admin_edit_prompt")],
    ])
    await message.answer("üõ† <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>", reply_markup=keyboard, parse_mode="HTML")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò ---

@dp.callback_query(F.data == "admin_stats")
async def callback_stats(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    try:
        cursor.execute("SELECT COUNT(DISTINCT id) FROM users")
        total_users = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM files")
        total_files = cursor.fetchone()[0]

        stats_message = (
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n"
            f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{total_users}`\n"
            f"üîä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: `{total_files}`"
        )
        await callback.message.answer(stats_message, parse_mode=ParseMode.MARKDOWN)
        await callback.answer()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        await callback.answer()

@dp.callback_query(F.data == "admin_clear_cache")
async def callback_clear_cache(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    try:
        files_deleted = 0
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ UPLOAD
        for filename in os.listdir(UPLOAD_DIR):
            file_path = os.path.join(UPLOAD_DIR, filename)
            if os.path.isfile(file_path):
                os.unlink(file_path)
                files_deleted += 1
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ OUTPUT
        for filename in os.listdir(OUTPUT_DIR):
            file_path = os.path.join(OUTPUT_DIR, filename)
            if os.path.isfile(file_path):
                os.unlink(file_path)
                files_deleted += 1

        await callback.message.answer(f"üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω. –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_deleted}")
        await callback.answer()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞.")
        await callback.answer()
async def send_restart_notification():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        restart_chat_id = config.get("restart_message_to")
        if restart_chat_id:
            await bot.send_message(
                restart_chat_id,
                "üîÑ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n"
                "‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã\n"
                "üìÖ –î–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è: " + datetime.now().strftime("%d.%m.%Y")
            )
            # –û—á–∏—â–∞–µ–º ID –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            if "restart_message_to" in config:
                config["restart_message_to"] = None
                with open("config.json", "w", encoding="utf-8") as f:
                    json.dump(config, f, indent=4, ensure_ascii=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")
async def send_last_log_lines(callback: CallbackQuery, filename: str, lines_count: int = 50):
    try:
        if not os.path.exists(filename):
            await callback.message.answer(f"‚ö†Ô∏è –§–∞–π–ª `{filename}` –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode=ParseMode.MARKDOWN)
            return

        with open(filename, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        if not lines:
            await callback.message.answer(f"üìÉ –§–∞–π–ª `{filename}` –ø—É—Å—Ç.", parse_mode=ParseMode.MARKDOWN)
            return

        last_lines = "".join(lines[-lines_count:])
        await callback.message.answer(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(lines[-lines_count:])} —Å—Ç—Ä–æ–∫ –∏–∑ `{filename}`:\n"
                                      f"```\n{last_lines}```", parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤ {filename}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ `{filename}`.", parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(F.data == "admin_view_log_bot")
async def callback_view_log_bot(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    await send_last_log_lines(callback, 'bot.log')
    await callback.answer()

@dp.callback_query(F.data == "admin_view_log_error")
async def callback_view_log_error(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    await send_last_log_lines(callback, 'error.log')
    await callback.answer()

# [–£–î–ê–õ–ï–ù–û] üìå –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª–µ–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è, –¥—É–±–ª–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è get_prompts_with_dates.
# –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç –∏–∑ llm_client.py

@dp.callback_query(F.data == "admin_edit_prompt")
async def admin_edit_prompt_menu(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    # üìå –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –∏–∑ llm_client, –∞ –Ω–µ –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    # –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç, —Ç.–∫. –æ–Ω –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ–¥–∞ –≤ 'todo'
    prompts = get_llm_prompts(transcript="", mode="all")
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=key, callback_data=f"edit_prompt_{key}")]
            for key in prompts.keys()
        ]
    )
    await callback.message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
    await callback.answer()

@dp.callback_query(F.data.startswith("edit_prompt_"))
async def admin_choose_prompt(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    mode = callback.data.replace("edit_prompt_", "")
    
    # üìå –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –∏–∑ llm_client
    prompts = get_llm_prompts(transcript="", mode="all")
    if mode not in prompts:
        await callback.message.answer("‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ—Ç.")
        return

    admin_state[callback.from_user.id] = {"mode": "edit_prompt", "prompt_key": mode}
    await callback.message.answer(
        f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ <b>{mode}</b>:\n\n"
        f"üìÑ –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–∞–∫:\n<code>{prompts[mode][:300]}...</code>",
        parse_mode="HTML"
    )
    await callback.answer()

@dp.message(F.text)
async def handle_admin_input(message: Message):
    user_id = message.from_user.id
    if user_id not in admin_state:
        # –≠—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if is_allowed(user_id):
            await message.answer(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥: /start, /help, /support."
            )
        else:
            await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    state = admin_state[user_id]
    action = state["mode"]

    if action == "edit_prompt":
        prompt_key = state["prompt_key"]
        new_prompt = message.text.strip()

        # –ß–∏—Ç–∞–µ–º llm_client.py
        try:
            with open("llm_client.py", "r", encoding="utf-8") as f:
                code = f.read()
        except FileNotFoundError:
            await message.answer("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –§–∞–π–ª llm_client.py –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            del admin_state[user_id]
            return
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è llm_client.py: {e}")
            del admin_state[user_id]
            return

        # –ò—â–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–ª—é—á–∞
        # üìå –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ f-—Å—Ç—Ä–æ–∫
        pattern = rf'"{prompt_key}"\s*:\s*f?"""[\s\S]*?"""'
        # –ó–∞–º–µ–Ω—è–µ–º, —Å–æ—Ö—Ä–∞–Ω—è—è f-—Å—Ç—Ä–æ–∫—É (f""")
        replacement = f'"{prompt_key}": f"""{new_prompt}"""'

        updated_code, count = re.subn(pattern, replacement, code, count=1)
        if count == 0:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –±–µ–∑ f-—Å—Ç—Ä–æ–∫–∏ (—Ö–æ—Ç—è –æ–Ω–∏ –≤—Å–µ f-—Å—Ç—Ä–æ–∫–∏)
            pattern = rf'"{prompt_key}"\s*:\s*"""[\s\S]*?"""'
            replacement = f'"{prompt_key}": f"""{new_prompt}"""' # –í—Å–µ–≥–¥–∞ –¥–µ–ª–∞–µ–º f-—Å—Ç—Ä–æ–∫–æ–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–∞—Ç
            updated_code, count = re.subn(pattern, replacement, code, count=1)

        if count == 0:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–º–ø—Ç –≤ llm_client.py. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω –ø–æ–∏—Å–∫–∞.")
            del admin_state[user_id]
            return

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
        try:
            with open("llm_client.py", "w", encoding="utf-8") as f:
                f.write(updated_code)
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ llm_client.py: {e}")
            del admin_state[user_id]
            return

        await message.answer(f"‚úÖ –ü—Ä–æ–º–ø—Ç <b>{prompt_key}</b> –æ–±–Ω–æ–≤–ª—ë–Ω –≤ llm_client.py", parse_mode="HTML")
        del admin_state[user_id]

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await message.answer("‚ôª –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
        config["restart_message_to"] = message.from_user.id
        try:
            with open("config.json", "w", encoding="utf-8") as f:
                json.dump(config, f, indent=4, ensure_ascii=False)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å restart_message_to: {e}")
            
        os.execl(sys.executable, sys.executable, *sys.argv)
        return

    try:
        target_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        return

    if action == "add":
        if target_id in ALLOWED_USERS:
            await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å.")
        else:
            ALLOWED_USERS.add(target_id)
            config["allowed_users"] = list(ALLOWED_USERS)
            with open("config.json", "w", encoding="utf-8") as f:
                json.dump(config, f, indent=4, ensure_ascii=False)
            await message.answer(f"‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target_id}</code> –¥–æ–±–∞–≤–ª–µ–Ω.", parse_mode="HTML")

    elif action == "remove":
        if target_id not in ALLOWED_USERS:
            await message.answer("‚ùå –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç.")
        else:
            ALLOWED_USERS.remove(target_id)
            config["allowed_users"] = list(ALLOWED_USERS)
            with open("config.json", "w", encoding="utf-8") as f:
                json.dump(config, f, indent=4, ensure_ascii=False)
            await message.answer(f"‚ûñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target_id}</code> —É–¥–∞–ª—ë–Ω.", parse_mode="HTML")

    del admin_state[user_id]

@dp.callback_query(F.data == "admin_restart")
async def callback_restart_bot(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    config["restart_message_to"] = callback.from_user.id
    with open("config.json", "w", encoding="utf-8") as f:
        json.dump(config, f, indent=4, ensure_ascii=False)

    await callback.message.answer("‚ôª –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    await callback.answer()
    
    # –ì—Ä–∞–º–æ—Ç–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    os.execl(sys.executable, sys.executable, *sys.argv)

@dp.callback_query(F.data == "admin_list")
async def callback_list_users(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    if not ALLOWED_USERS:
        await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return
    users_text = "\n".join(f"‚Ä¢ <code>{uid}</code>" for uid in sorted(ALLOWED_USERS))
    await callback.message.answer(f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{users_text}", parse_mode="HTML")
    await callback.answer()

@dp.callback_query(F.data == "admin_add")
async def callback_add_user(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    admin_state[callback.from_user.id] = {"mode": "add"}
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ <b>–¥–æ–±–∞–≤–∏—Ç—å</b>:", parse_mode="HTML")
    await callback.answer()

@dp.callback_query(F.data == "admin_remove")
async def callback_remove_user(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    admin_state[callback.from_user.id] = {"mode": "remove"}
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ <b>—É–¥–∞–ª–∏—Ç—å</b>:", parse_mode="HTML")
    await callback.answer()

if __name__ == "__main__":
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    set_model(MODEL_NAME)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    async def main():
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot_task = asyncio.create_task(dp.start_polling(bot))
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
        await asyncio.sleep(2)
        await send_restart_notification()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        await bot_task
    
    try:
        asyncio.run(main())
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")