import requests
import re
from datetime import datetime, timedelta
import logging
import json
import os
import pytz  # üìå –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
from typing import Dict, List, Tuple, Optional, Any
from dataclasses import dataclass

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Load configuration from config.json
try:
    with open('config.json', 'r', encoding='utf-8') as f:
        config_data = json.load(f)
    OLLAMA_URL = config_data.get("OLLAMA_URL", "http://localhost:11434/api/chat")
    MODEL_NAME = config_data.get("MODEL_NAME", "llama3")
except FileNotFoundError:
    logger.warning("config.json not found, using environment variables or defaults")
    OLLAMA_URL = os.getenv("OLLAMA_URL", "http://localhost:11434/api/chat")
    MODEL_NAME = os.getenv("MODEL_NAME", "llama3")
except json.JSONDecodeError as e:
    logger.error(f"Error parsing config.json: {e}, using defaults")
    OLLAMA_URL = "http://localhost:11434/api/chat"
    MODEL_NAME = "llama3"

LLM_PRESETS = {
    "—Ç–æ—á–Ω–æ": {"temperature": 0.0, "top_p": 0.9, "repeat_penalty": 1.2, "top_k": 20, "num_predict": 3072},
}
CURRENT_PRESET = "—Ç–æ—á–Ω–æ"


@dataclass
class LLMConfig:
    """Configuration for LLM client"""
    ollama_url: str
    model_name: str
    preset: str = CURRENT_PRESET
    timeout: int = 120
    max_retries: int = 2


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ) ---

def validate_input(text: str) -> Tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞"""
    if not text or not text.strip():
        logger.warning("–í–∞–ª–∏–¥–∞—Ü–∏—è: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç")
        return False, "–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    text_length = len(text.strip())
    
    if text_length < 10:
        logger.warning(f"–í–∞–ª–∏–¥–∞—Ü–∏—è: —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({text_length} —Å–∏–º–≤–æ–ª–æ–≤)")
        return False, "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)"
    
    if text_length > 50000:
        logger.warning(f"–í–∞–ª–∏–¥–∞—Ü–∏—è: —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({text_length} —Å–∏–º–≤–æ–ª–æ–≤)")
        return False, "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 50000 —Å–∏–º–≤–æ–ª–æ–≤)"
    
    logger.debug(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞: —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {text_length} —Å–∏–º–≤–æ–ª–æ–≤")
    return True, "OK"


def preprocess_input(text: str) -> str:
    """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç"""
    if not text or not text.strip():
        return ""
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π —Å —Ç–æ—á–∫–∞–º–∏
    text = re.sub(r'\bK\.?\s*P\.?\s*I\.?\b', 'KPI', text, flags=re.IGNORECASE)
    text = re.sub(r'\bC\.?\s*R\.?\s*M\.?\b', 'CRM', text, flags=re.IGNORECASE)
    text = re.sub(r'\bH\.?\s*R\.?\b', 'HR', text, flags=re.IGNORECASE)
    text = re.sub(r'\bA\.?\s*B\.?\s*—Ç–µ—Å—Ç', 'AB —Ç–µ—Å—Ç', text, flags=re.IGNORECASE)
    text = re.sub(r'\bQ\.?\s*(\d+)', r'Q\1', text, flags=re.IGNORECASE)
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ "X —á–∞—Å–æ–≤ —Ä–æ–≤–Ω–æ" -> "X:00"
    text = re.sub(r"\b(\d{1,2})\s+—á–∞—Å(–∞|–æ–≤)?\s+—Ä–æ–≤–Ω–æ\b", lambda m: f"{int(m.group(1)):02d}:00", text, flags=re.IGNORECASE)
    
    # "X —á–∞—Å–æ–≤ Y –º–∏–Ω—É—Ç" -> "X:Y"
    text = re.sub(r"\b(\d{1,2})\s+—á–∞—Å(–∞|–æ–≤)?\s+(\d{1,2})\s+–º–∏–Ω—É—Ç[—ã–∞]?\b", lambda m: f"{int(m.group(1)):02d}:{int(m.group(3)):02d}", text, flags=re.IGNORECASE)
    
    # –°—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    text = re.sub(r"\b[–í–≤]\s+(\d{1,2})\s+[–ß—á]–∞—Å(–∞|–æ–≤)?\b", lambda m: f"–≤ {int(m.group(1)):02d}:00", text)
    
    # "–≤ 9" -> "–≤ 9:00" (–∏—Å–∫–ª—é—á–∞–µ–º —Å–ª—É—á–∞–∏ —Ç–∏–ø–∞ "–≤ 9 —Å–µ–Ω—Ç—è–±—Ä—è")
    months_list = ["—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", 
                   "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"]
    month_pattern = "|".join(months_list)
    text = re.sub(rf"\b[–í–≤]\s+(\d{{1,2}})(?![:\d\.]|\s+(?:{month_pattern}))", r"–≤ \1:00", text)
    
    # "15.30" -> "15:30" –¢–û–õ–¨–ö–û –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ (–ù–ï –¥–ª—è –¥–∞—Ç!)
    text = re.sub(r"\b(\d{1,2})\.(\d{2})\b(?!\.\d{4})", r"\1:\2", text)
    
    # –û—á–∏—Å—Ç–∫–∞ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    text = re.sub(r"\s+", " ", text).strip()
    return text


def sanitize_llm_response(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ LLM"""
    if not text:
        return ""
    
    text = text.strip()
    # –£–¥–∞–ª–µ–Ω–∏–µ HTML —Ç–µ–≥–æ–≤
    text = re.sub(r'</?\w+>', '', text)
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ –∞–Ω–≥–ª–∏—Ü–∏–∑–º–æ–≤
    replacements = {
        'CRM': '—Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏',
        'HR': '–æ—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤',
        'KPI': '–∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        'CEO': '–≥–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä',
        'IT': '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
        'C.R.M': '—Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏',
        'K.P.I': '–∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        'H.R': '–æ—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤',
        'A.B': 'AB',
        'Digital Trend': '—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã',
        'Zoom': '–≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫',
        '—Ñ–∏–¥–±—ç–∫': '–æ—Ç–∑—ã–≤'
    }
    
    for pattern, replacement in replacements.items():
        pattern_variations = [
            pattern,
            pattern.replace(' ', ''),
            pattern.replace('.', ''),
            pattern.replace('. ', '.'),
            pattern.replace(' .', '.')
        ]
        
        for variant in pattern_variations:
            text = re.sub(r'\b' + re.escape(variant) + r'\b', replacement, text, flags=re.IGNORECASE)
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –æ—à–∏–±–æ–∫
    text = re.sub(r'\b–í –∑–∞–¥–∞—á –Ω–µ—Ç\.?\b', '–ó–∞–¥–∞—á–∏:\n(–ù–µ—Ç –∑–∞–¥–∞—á)', text, flags=re.IGNORECASE)
    text = re.sub(r'\b–ó–∞–¥–∞—á–∏ –Ω–µ—Ç\.?\b', '–ó–∞–¥–∞—á–∏:\n(–ù–µ—Ç –∑–∞–¥–∞—á)', text, flags=re.IGNORECASE)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–æ–±—ã—Ç–∏–π
    lines = text.split('\n')
    processed_lines = []
    seen_events = set()
    
    for line in lines:
        line = line.strip()
        if not line:
            processed_lines.append(line)
            continue
            
        # üìå –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–∏—Ä–µ "‚Äî", –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–æ–º–ø—Ç–µ.
        # –ï—Å–ª–∏ —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ (–≤—Å—Ç—Ä–µ—á–∞ –∏–ª–∏ –∑–∞–¥–∞—á–∞)
        if line.startswith('‚Äî '):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤–∫–ª—é—á–∞—è –≤—Ä–µ–º—è
            if line.lower() not in seen_events:
                seen_events.add(line.lower())
                processed_lines.append(line)
        else:
            # –ó–∞–º–µ–Ω—è–µ–º —Ç–∏—Ä–µ —Ç–æ–ª—å–∫–æ –≤ –æ–±—ã—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö
            line = re.sub(r'\s-\s', ' ‚Äî ', line)
            processed_lines.append(line)
    
    return '\n'.join(processed_lines)




def extract_participants(text: str):
    """
    Extract participant names from Russian text.
    Identifies Russian names in contexts like –≤—Å—Ç—Ä–µ—á–∞ —Å X, –∑–≤–æ–Ω–æ–∫ —Å Y.
    
    Args:
        text: The transcript text
        
    Returns:
        List of identified participant names
    """
    import re
    participants = set()
    
    patterns = [
        r'(?:–≤—Å—Ç—Ä–µ—á–∞|–∑–≤–æ–Ω–æ–∫|–æ–±–µ–¥|—Å–æ–≤–µ—â–∞–Ω–∏–µ|—Ä–∞–∑–≥–æ–≤–æ—Ä|–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã|–æ–±—Å—É–∂–¥–µ–Ω–∏–µ|—Å–æ–∑–≤–æ–Ω)\s+(?:—Å|—Å–æ)\s+([–ê-–Ø–Å][–∞-—è—ë]+(?:–æ–π|–æ–º|—ã–º|–µ–π|–µ–º)?)',
        r'(?:–æ—Ç|–¥–ª—è|—É)\s+([–ê-–Ø–Å][–∞-—è—ë]+(?:—ã|–∏|–∞)?)',
        r'([–ê-–Ø–Å][–∞-—è—ë]+(?:–æ–π|–æ–º|—ã–º|–µ–π|–µ–º)?)\s+([–ê-–Ø–Å][–∞-—è—ë]+(?:–æ–π|–æ–º|—ã–º|–µ–π|–µ–º|–∏—á–µ–º|–æ–≤–Ω–æ–π)?)',
    ]
    
    for pattern in patterns:
        matches = re.findall(pattern, text, re.IGNORECASE)
        for match in matches:
            if isinstance(match, tuple):
                name = ' '.join(match)
            else:
                name = match
            name = re.sub(r'(–æ–º|–æ–π|—ã–º|–µ–π|–µ–º|–∏—á–µ–º|–æ–≤–Ω–æ–π)$', '', name, flags=re.IGNORECASE)
            if len(name) >= 3:
                participants.add(name.strip())
    
    logger.debug(f'Extracted participants: {participants}')
    return sorted(list(participants))

def extract_year_from_transcript(transcript: str) -> int:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–æ–¥ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    """
    current_year = datetime.now().year
    
    # –ü–æ–∏—Å–∫ —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è –≥–æ–¥–∞ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    year_patterns = [
        r'\b(20\d{2})\b',  # 2025
        r'\b(\d{2})\.(\d{2})\.(20\d{2})\b',  # 13.09.2025
        r'\b(\d{1,2})\s+[–∞-—è]+\s+(20\d{2})',  # 13 —Å–µ–Ω—Ç—è–±—Ä—è 2025
    ]
    
    for pattern in year_patterns:
        matches = re.findall(pattern, transcript)
        for match in matches:
            if isinstance(match, tuple):
                year_str = match[-1]  # –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É (–≥–æ–¥)
            else:
                year_str = match
                
            try:
                year = int(year_str)
                if 2020 <= year <= 2030:  # —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
                    logger.info(f"–ù–∞–π–¥–µ–Ω –≥–æ–¥ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–µ: {year}")
                    return year
            except ValueError:
                continue
    
    logger.info(f"–ì–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π: {current_year}")
    return current_year
    
    # –ü–æ–∏—Å–∫ –≤ –¥–∞—Ç–∞—Ö —Ç–∏–ø–∞ "13.09.2025"
    date_match = re.search(r'\b(\d{2})\.(\d{2})\.(20\d{2})\b', transcript)
    if date_match:
        try:
            year = int(date_match.group(3))
            if not (current_year - 10 <= year <= current_year + 10):
                logger.warning(f"Year {year} is out of reasonable range, using current year {current_year}")
                return current_year
            return year
        except ValueError:
            logger.warning("Invalid year format in date, using current year")
            return current_year
    
    # –ï—Å–ª–∏ –≥–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π
    return current_year


def parse_date_from_text(date_text: str, transcript_year: int) -> Optional[datetime]:
    """
    –ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 13 —Å–µ–Ω—Ç—è–±—Ä—è"
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–æ–¥–∞ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞.
    """
    months = {
        "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4,
        "–º–∞—è": 5, "–∏—é–Ω—è": 6, "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8,
        "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12
    }
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 13 —Å–µ–Ω—Ç—è–±—Ä—è"
    pattern = r"(?P<weekday>–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–í—Ç–æ—Ä–Ω–∏–∫|–°—Ä–µ–¥–∞|–ß–µ—Ç–≤–µ—Ä–≥|–ü—è—Ç–Ω–∏—Ü–∞|–°—É–±–±–æ—Ç–∞|–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ),\s*(?P<day>\d{1,2})\s+(?P<month>[–∞-—è–ê-–Ø]+)"
    
    match = re.search(pattern, date_text, re.IGNORECASE)
    if match:
        try:
            day = int(match.group("day"))
        except ValueError:
            logger.warning(f"Invalid day in date_text: {match.group('day')}")
            return None
        month_name = match.group("month").lower()
        month = months.get(month_name)
        
        if month:
            try:
                return datetime(transcript_year, month, day)
            except ValueError:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞: {day} {month_name} {transcript_year}")
    
    return None


def normalize_dates(text: str, year: int) -> str:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ –∫ —Ñ–æ—Ä–º–∞—Ç—É "–î–î.–ú–ú.–ì–ì–ì–ì, –¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏"
    """
    current_year = datetime.now().year
    if not (current_year - 1 <= year <= current_year + 2):
        logger.warning(f"–ì–æ–¥ {year} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º {current_year}")
        year = current_year
    weekdays_variants = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—Å—Ä–µ–¥—É", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "–ø—è—Ç–Ω–∏—Ü—É", "—Å—É–±–±–æ—Ç–∞", "—Å—É–±–±–æ—Ç—É", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    normalize_weekday = {
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "–≤—Ç–æ—Ä–Ω–∏–∫": "–≤—Ç–æ—Ä–Ω–∏–∫",
        "—Å—Ä–µ–¥–∞": "—Å—Ä–µ–¥–∞",
        "—Å—Ä–µ–¥—É": "—Å—Ä–µ–¥–∞",
        "—á–µ—Ç–≤–µ—Ä–≥": "—á–µ—Ç–≤–µ—Ä–≥",
        "–ø—è—Ç–Ω–∏—Ü–∞": "–ø—è—Ç–Ω–∏—Ü–∞",
        "–ø—è—Ç–Ω–∏—Ü—É": "–ø—è—Ç–Ω–∏—Ü–∞",
        "—Å—É–±–±–æ—Ç–∞": "—Å—É–±–±–æ—Ç–∞",
        "—Å—É–±–±–æ—Ç—É": "—Å—É–±–±–æ—Ç–∞",
        "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    }
    weekdays_list = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    months_map = {
        "—è–Ω–≤–∞—Ä—è": "01", "—Ñ–µ–≤—Ä–∞–ª—è": "02", "–º–∞—Ä—Ç–∞": "03", "–∞–ø—Ä–µ–ª—è": "04",
        "–º–∞—è": "05", "–∏—é–Ω—è": "06", "–∏—é–ª—è": "07", "–∞–≤–≥—É—Å—Ç–∞": "08",
        "—Å–µ–Ω—Ç—è–±—Ä—è": "09", "–æ–∫—Ç—è–±—Ä—è": "10", "–Ω–æ—è–±—Ä—è": "11", "–¥–µ–∫–∞–±—Ä—è": "12"
    }
    
    weekdays_pattern = "|".join(weekdays_variants)
    months_pattern = "|".join(months_map.keys())

    date_pattern = re.compile(
        r"(?:(?P<w1>" + weekdays_pattern + r"),\s*(?P<d1>\d{1,2})\s+(?P<m1>" + months_pattern + r"))" +
        r"|(?:(?P<d2>\d{1,2})\s+(?P<m2>" + months_pattern + r")\s*(?P<w2>" + weekdays_pattern + r")?)" +
        r"|\b(?P<w3>" + weekdays_pattern + r")\b",
        re.IGNORECASE
    )

    new_text = text
    offset = 0
    for match in date_pattern.finditer(text):
        if match.group("w3"):
            weekday = normalize_weekday.get(match.group("w3").lower())
            if weekday:
                standardized = weekday.capitalize()  # Keep as is, since no day
                # For standalone, we don't replace with full date here, handle in split
                continue  # Skip replacement for standalone in normalize, handle in split
        else:
            day_str = match.group("d1") or match.group("d2")
            if day_str:
                day = int(day_str)
            else:
                continue
            month_name = (match.group("m1") or match.group("m2") or "").lower()
            weekday = normalize_weekday.get((match.group("w1") or match.group("w2") or "").lower(), "")
            month_num = months_map.get(month_name, "")
            if month_num and day:
                if not weekday:
                    try:
                        date_obj = datetime(year, int(month_num), day)
                        weekday = weekdays_list[date_obj.weekday()]
                    except ValueError:
                        continue
                standardized = f"{day:02d}.{month_num}.{year}, {weekday}"
                start = match.start() + offset
                end = match.end() + offset
                new_text = new_text[:start] + standardized + new_text[end:]
                offset += len(standardized) - (end - start)

    return new_text


def split_by_dates(transcript: str) -> Dict[str, str]:
    """
    üìå –ò–°–ü–†–ê–í–õ–ï–ù–û –ò –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û:
    –î–µ–ª–∏—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–∞ –±–ª–æ–∫–∏ –ø–æ –¥–∞—Ç–∞–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –≥–æ–¥–∞.
    –¢–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 13 —Å–µ–Ω—Ç—è–±—Ä—è" –∏ "13 –æ–∫—Ç—è–±—Ä—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫".
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å: { "13.09.2025, –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "—Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏–π...", ... }
    """
    transcript_year = extract_year_from_transcript(transcript)
    logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω –≥–æ–¥ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {transcript_year}")

    weekdays_variants = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—Å—Ä–µ–¥—É", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "–ø—è—Ç–Ω–∏—Ü—É", "—Å—É–±–±–æ—Ç–∞", "—Å—É–±–±–æ—Ç—É", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    normalize_weekday = {
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "–≤—Ç–æ—Ä–Ω–∏–∫": "–≤—Ç–æ—Ä–Ω–∏–∫",
        "—Å—Ä–µ–¥–∞": "—Å—Ä–µ–¥–∞",
        "—Å—Ä–µ–¥—É": "—Å—Ä–µ–¥–∞",
        "—á–µ—Ç–≤–µ—Ä–≥": "—á–µ—Ç–≤–µ—Ä–≥",
        "–ø—è—Ç–Ω–∏—Ü–∞": "–ø—è—Ç–Ω–∏—Ü–∞",
        "–ø—è—Ç–Ω–∏—Ü—É": "–ø—è—Ç–Ω–∏—Ü–∞",
        "—Å—É–±–±–æ—Ç–∞": "—Å—É–±–±–æ—Ç–∞",
        "—Å—É–±–±–æ—Ç—É": "—Å—É–±–±–æ—Ç–∞",
        "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    }
    weekdays_list = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    months_map = {
        "—è–Ω–≤–∞—Ä—è": "01", "—Ñ–µ–≤—Ä–∞–ª—è": "02", "–º–∞—Ä—Ç–∞": "03", "–∞–ø—Ä–µ–ª—è": "04",
        "–º–∞—è": "05", "–∏—é–Ω—è": "06", "–∏—é–ª—è": "07", "–∞–≤–≥—É—Å—Ç–∞": "08",
        "—Å–µ–Ω—Ç—è–±—Ä—è": "09", "–æ–∫—Ç—è–±—Ä—è": "10", "–Ω–æ—è–±—Ä—è": "11", "–¥–µ–∫–∞–±—Ä—è": "12"
    }
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ regex
    weekdays_pattern = "|".join(weekdays_variants)
    months_pattern = "|".join(months_map.keys())

    # –ì–∏–±–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ + standalone weekday
    date_pattern = re.compile(
        r"(?:(?P<w1>" + weekdays_pattern + r"),\s*(?P<d1>\d{1,2})\s+(?P<m1>" + months_pattern + r"))" +
        r"|(?:(?P<d2>\d{1,2})\s+(?P<m2>" + months_pattern + r")\s*(?P<w2>" + weekdays_pattern + r")?)" +
        r"|\b(?P<w3>" + weekdays_pattern + r")\b",
        re.IGNORECASE
    )

    blocks = {}
    matches = list(date_pattern.finditer(transcript))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
    if not matches:
        logger.warning("–í —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        if transcript.strip():
            blocks["–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –¥–∞—Ç–∞"] = transcript.strip()
    else:
        # –¢–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –¥–∞—Ç–æ–π –∫–∞–∫ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è
        pre_start = 0
        first_match = matches[0]
        pre_text = transcript[pre_start:first_match.start()].strip()
        if pre_text:
            blocks["–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –¥–∞—Ç–∞"] = pre_text
        
        last_date = None
        for i, match in enumerate(matches):
            date_obj = None
            if match.group("w3"):
                weekday = normalize_weekday.get(match.group("w3").lower())
                if weekday and last_date:
                    target_weekday_idx = weekdays_list.index(weekday)
                    days_delta = (target_weekday_idx - last_date.weekday()) % 7
                    if days_delta == 0:
                        days_delta = 7  # next week if same day
                    date_obj = last_date + timedelta(days=days_delta)
                    day = date_obj.day
                    month_num = f"{date_obj.month:02d}"
                    year = date_obj.year
                    date_key = f"{day:02d}.{month_num}.{year}, {weekday}"
            else:
                day_str = match.group("d1") or match.group("d2")
                if day_str:
                    day = int(day_str)
                else:
                    continue
                month_name = (match.group("m1") or match.group("m2")).lower()
                weekday = normalize_weekday.get((match.group("w1") or match.group("w2") or "").lower(), "")
                month_num = months_map.get(month_name, "")
                if month_num and day:
                    try:
                        date_obj = datetime(transcript_year, int(month_num), day)
                        if not weekday:
                            weekday = weekdays_list[date_obj.weekday()]
                        date_key = f"{day:02d}.{month_num}.{transcript_year}, {weekday}"
                    except ValueError:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞—Ç—É –¥–ª—è {day}.{month_num}.{transcript_year}")
                        continue

            if date_obj:
                last_date = date_obj

            if 'date_key' not in locals():
                continue

            start = match.end()
            end = matches[i + 1].start() if i + 1 < len(matches) else len(transcript)
            content = transcript[start:end].strip()
            
            # –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É –≤ –Ω–∞—á–∞–ª–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            # Comment: Extended to handle leading comma as well for cases like ", 8:00..."
            if content and content[0] in '.,':
                content = content[1:].strip()

            blocks[date_key] = content

    return blocks


def get_date_context() -> Dict[str, Any]:
    """
    üìå –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ö–û–ù–¢–ï–ö–°–¢ –¢–ï–ö–£–©–ï–ô –î–ê–¢–´ (–°–ï–ì–û–î–ù–Ø) –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è, –∫–∞–∫ –≤ bot.py.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞—Ç–∞–º–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö.
    """
    
    # üìå –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É, –∞ –Ω–µ –¥–∞—Ç—É –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
    tz = pytz.timezone("Europe/Moscow")
    target_date = datetime.now(tz)
    
    # üìå –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞.
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ—Ç–≤–µ—á–∞—Ç—å –¢–û–õ–¨–ö–û –∑–∞ –ê–ö–¢–£–ê–õ–¨–ù–´–ô –∫–æ–Ω—Ç–µ–∫—Å—Ç.
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
    today_str = target_date.strftime("%d.%m.%Y")
    days_of_week = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    today_weekday = days_of_week[target_date.weekday()]
    
    # –ó–∞–≤—Ç—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞
    tomorrow = target_date + timedelta(days=1)
    tomorrow_str = tomorrow.strftime("%d.%m.%Y")
    tomorrow_day_num = str(tomorrow.day)
    tomorrow_month_genitive = ["—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", 
                               "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"][tomorrow.month - 1]
    tomorrow_weekday = days_of_week[tomorrow.weekday()]

    # –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¢–ï–ö–£–©–ï–ô –¥–∞—Ç—ã)
    days_since_monday = target_date.weekday()
    start_of_current_week = target_date - timedelta(days=days_since_monday)
    end_of_last_week = start_of_current_week - timedelta(days=1)
    start_of_last_week = end_of_last_week - timedelta(days=6)
    
    last_week_start = start_of_last_week.strftime("%d.%m.%Y")
    last_week_end = end_of_last_week.strftime("%d.%m.%Y")

    return {
        "current_year": target_date.year, # üìå –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –¥–ª—è fallback
        "target_date": target_date,
        "today_str": today_str,
        "today_weekday": today_weekday,
        "tomorrow_str": tomorrow_str,
        "tomorrow_day_num": tomorrow_day_num,
        "tomorrow_month_genitive": tomorrow_month_genitive,
        "tomorrow_weekday": tomorrow_weekday,
        "last_week_start": last_week_start,
        "last_week_end": last_week_end
    }


def get_prompts_with_dates(transcript: str, mode: str) -> str | Dict[str, str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç—ã —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏.
    üìå –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–∏–ø –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ 'all'
    """
    
    # üìå –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∞—Ç—ã –±–µ—Ä–µ—Ç—Å—è –ê–ö–¢–£–ê–õ–¨–ù–´–ô, –∞ –Ω–µ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
    date_context = get_date_context()
    
    # üìå –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–æ–¥ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ 'todo' –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞,
    # —Å fallback –Ω–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –∏–∑ (–∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ) –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    transcript_year = extract_year_from_transcript(transcript) or date_context["current_year"]
    
    today_str = date_context["today_str"]
    today_weekday = date_context["today_weekday"]
    tomorrow_str = date_context["tomorrow_str"]
    tomorrow_day_num = date_context["tomorrow_day_num"]
    tomorrow_month_genitive = date_context["tomorrow_month_genitive"]
    tomorrow_weekday = date_context["tomorrow_weekday"]
    last_week_start = date_context["last_week_start"]
    last_week_end = date_context["last_week_end"]

    classification = """
<–∫—Ä–∏—Ç–µ—Ä–∏–π_–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏>
- –í—Å—Ç—Ä–µ—á–∏: —Å–æ–±—ã—Ç–∏—è, –≤–∫–ª—é—á–∞—é—â–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ª—é–¥—å–º–∏ (–≤—Å—Ç—Ä–µ—á–∞ —Å..., –∑–≤–æ–Ω–æ–∫ —Å..., –æ–±–µ–¥ —Å..., —Å–æ–≤–µ—â–∞–Ω–∏–µ —Å..., –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Å..., –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ —Å..., –≤–µ—á–µ—Ä–Ω—è—è –≤—Å—Ç—Ä–µ—á–∞ —Å..., –æ–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á–∞ —Å...)
- –ó–∞–¥–∞—á–∏: —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å..., –ø—Ä–æ–≤–µ—Ä–∏—Ç—å..., –æ–±–Ω–æ–≤–∏—Ç—å..., –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å..., —É—Ç–≤–µ—Ä–¥–∏—Ç—å..., —Å—Ç–∞–≤–∏—Ç—å..., —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å...)
- –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –∏–º–µ–µ—Ç –≤—Ä–µ–º—è, –Ω–æ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–¥–∞—á–µ–π - –ø–æ–º–µ—Å—Ç–∏ –≤ –∑–∞–¥–∞—á–∏, –≤–∫–ª—é—á–∏–≤ –≤—Ä–µ–º—è –≤ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ‚Äî –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ 10:00)
- –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —è–≤–ª—è–µ—Ç—Å—è –≤—Å—Ç—Ä–µ—á–µ–π –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ - –ø–æ–º–µ—Å—Ç–∏ –≤ –≤—Å—Ç—Ä–µ—á–∏ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ‚Äî –û–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
</–∫—Ä–∏—Ç–µ—Ä–∏–π_–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏>
    """

    text_format = """
<—Ñ–æ—Ä–º–∞—Ç_—Ç–µ–∫—Å—Ç–∞>
–¢–µ–∫—Å—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç—ã–º–∏ –∏–ª–∏ —Ç–æ—á–∫–∞–º–∏, –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ß–ß:–ú–ú –æ–ø–∏—Å–∞–Ω–∏–µ, –ß–ß:–ú–ú –æ–ø–∏—Å–∞–Ω–∏–µ..."
–†–∞–∑–±–µ—Ä–∏ –∏—Ö –∏ –∏–∑–≤–ª–µ–∫–∏ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è.
</—Ñ–æ—Ä–º–∞—Ç_—Ç–µ–∫—Å—Ç–∞>
    """

    prompts = {
        "todo": f"""
<—Ä–æ–ª—å>
–¢—ã ‚Äî —Å–≤–µ—Ä—Ö—Ç–æ—á–Ω—ã–π —Å—É–ø–µ—Ä —Ä–æ–±–æ—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –°–¢–†–û–ì–û –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞.
–¢–≤–æ—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¢–û–õ–¨–ö–û —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≤ –ø–ª–∞–Ω, –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
</—Ä–æ–ª—å>

<–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏_–≤–∞–∂–Ω—ã–µ_–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è>
üö´ –°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù–û:
- –í—ã–¥—É–º—ã–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ
- –î–æ–±–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–∞–º—è—Ç–∏ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
- –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –¥–æ–¥—É–º—ã–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
- –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —Å–æ–∑–¥–∞—Ç—å..."
- –°–º–µ—à–∏–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏

‚úÖ –†–ê–ó–†–ï–®–ï–ù–û –¢–û–õ–¨–ö–û:
- –ò–∑–≤–ª–µ–∫–∞—Ç—å —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ø–í–ù–û —É–ø–æ–º—è–Ω—É—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ
- –†–∞–±–æ—Ç–∞—Ç—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–º
- –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ —á–µ—Ç–∫–æ –∏ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
- –†–∞–∑–º–µ—â–∞—Ç—å –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É –°–¢–†–û–ì–û –≤ —Å–≤–æ–µ–π –¥–∞—Ç–µ
- –≤—ã–≤–æ–¥–∏ –≤—Å–µ –≤—Å—Ç—Ä–µ—á–∏, —Å–æ–±—ã—Ç–∏—è
</–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏_–≤–∞–∂–Ω—ã–µ_–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è>

<–∞–ª–≥–æ—Ä–∏—Ç–º_–∏–∑–≤–ª–µ—á–µ–Ω–∏—è_–ø–æ_–¥–∞—Ç–∞–º>
1. –ù–∞–π–¥–∏ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä "13.09.{transcript_year}, –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
2. –ß–∏—Ç–∞–π —Å–æ–±—ã—Ç–∏—è –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —ç—Ç–æ–π –¥–∞—Ç—ã –î–û —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç—ã
3. –†–∞–∑–º–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á–∏ –∏ –∑–∞–¥–∞—á–∏ –≤ –±–ª–æ–∫ —ç—Ç–æ–π –¥–∞—Ç—ã
4. –ü–µ—Ä–µ–π–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏

–ü–†–ò–ú–ï–†:
"13.09.{transcript_year}, –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: –≤—Å—Ç—Ä–µ—á–∞ –ê, –∑–∞–¥–∞—á–∞ X
14.09.{transcript_year}, –≤—Ç–æ—Ä–Ω–∏–∫: –≤—Å—Ç—Ä–µ—á–∞ –ë, –∑–∞–¥–∞—á–∞ Y"
‚Üí 13.09.{transcript_year}, –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: –≤—Å—Ç—Ä–µ—á–∞ –ê, –∑–∞–¥–∞—á–∞ X
‚Üí 14.09.{transcript_year}, –≤—Ç–æ—Ä–Ω–∏–∫: –≤—Å—Ç—Ä–µ—á–∞ –ë, –∑–∞–¥–∞—á–∞ Y
–ù–ï –°–ú–ï–®–ò–í–ê–ô –∑–∞–¥–∞—á–∏ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏!
</–∞–ª–≥–æ—Ä–∏—Ç–º_–∏–∑–≤–ª–µ—á–µ–Ω–∏—è_–ø–æ_–¥–∞—Ç–∞–º>

{text_format}

{classification}

<—Ñ–æ—Ä–º–∞—Ç_–æ—Ç–≤–µ—Ç–∞>
–î–î.–ú–ú.{transcript_year}, –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
–í—Å—Ç—Ä–µ—á–∏:
‚Äî –ß–ß:–ú–ú ‚Äî –û–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
–ó–∞–¥–∞—á–∏:
‚Äî –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (—á–µ—Ç–∫–æ, –±–µ–∑ —Å–ª–æ–≤–∞ "–∑–∞–¥–∞—á–∞" –≤ –Ω–∞—á–∞–ª–µ)

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –ü–û –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Æ:
- –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –≤—Ç–æ—Ä–Ω–∏–∫, —Å—Ä–µ–¥–∞, —á–µ—Ç–≤–µ—Ä–≥, –ø—è—Ç–Ω–∏—Ü–∞, —Å—É–±–±–æ—Ç–∞, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
- –ò—Å–ø–æ–ª—å–∑—É–π –î–õ–ò–ù–ù–û–ï –¢–ò–†–ï (‚Äî) –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
- –í–°–ï–ì–î–ê –ø–∏—à–∏ "–ó–∞–¥–∞—á–∏:" (–≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ), –ù–ï "–ó–∞–¥–∞—á–∞:"
- –ö–ê–ñ–î–ê–Ø –∑–∞–¥–∞—á–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "‚Äî " (–¥–ª–∏–Ω–Ω–æ–µ —Ç–∏—Ä–µ + –ø—Ä–æ–±–µ–ª)
- –ù–ï –ø–∏—à–∏ –∑–∞–¥–∞—á–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫–∏: "–°–æ–∑–¥–∞—Ç—å. –í–Ω–µ–¥—Ä–∏—Ç—å. –ó–∞–ø—É—Å—Ç–∏—Ç—å."
- –ö–ê–ñ–î–ê–Ø –∑–∞–¥–∞—á–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —Å —Ç–∏—Ä–µ: "‚Äî –°–æ–∑–¥–∞—Ç—å", "‚Äî –í–Ω–µ–¥—Ä–∏—Ç—å", "‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å"
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏—Ö —Å—Ç—Ä–æ–∫ –≤ –∫–æ–Ω—Ü–µ —Ç–∏–ø–∞ "–†–∞–±–æ—á–∏—Ö –∑–∞–¥–∞—á –Ω–µ—Ç."
- –ï—Å–ª–∏ —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π - –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–π —ç—Ç—É –¥–∞—Ç—É
- –°–æ—Ä—Ç–∏—Ä—É–π –≤—Å—Ç—Ä–µ—á–∏ –∏ –∑–∞–¥–∞—á–∏ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
</—Ñ–æ—Ä–º–∞—Ç_–æ—Ç–≤–µ—Ç–∞>
""",

        "today_meetings": f"""
<—Ä–æ–ª—å>
–¢—ã ‚Äî –ª–∞–∑–µ—Ä–Ω–æ-—Ç–æ—á–Ω—ã–π —Ä–æ–±–æ—Ç-—Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –í–°–ï–• —Å–æ–±—ã—Ç–∏–π –¥–Ω—è {today_str}, {today_weekday}.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏ –≤—Å—Ç—Ä–µ—á–∏, –∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
</—Ä–æ–ª—å>

{text_format}

<–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏_–≤–∞–∂–Ω–∞—è_–∑–∞–¥–∞—á–∞>
–ò–ó–í–õ–ï–ö–ò –ê–ë–°–û–õ–Æ–¢–ù–û –í–°–ï –≤—Å—Ç—Ä–µ—á–∏ –∏ –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –¥–∞—Ç–µ {today_str} (—Å–µ–≥–æ–¥–Ω—è, {today_weekday}).
‚ö†Ô∏è –û–°–û–ë–ï–ù–ù–û –í–ê–ñ–ù–û –î–õ–Ø –í–†–ï–ú–ï–ù–ò:
- "13 —á–∞—Å–æ–≤ —Ä–æ–≤–Ω–æ" = "13:00"
- "15 —á–∞—Å–æ–≤ 30 –º–∏–Ω—É—Ç" = "15:30"
- –ù–ï –ú–ï–ù–Ø–ô –≤—Ä–µ–º—è –Ω–∞ —Å–≤–æ–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!
- –¢–û–ß–ù–û –∫–æ–ø–∏—Ä—É–π –≤—Å–µ –≤—Å—Ç—Ä–µ—á–∏ –∏–∑ –±–ª–æ–∫–∞!

‚ö†Ô∏è –û–°–û–ë–ï–ù–ù–û –í–ê–ñ–ù–û –î–õ–Ø –ó–ê–î–ê–ß:
–ó–∞–¥–∞—á–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∏–¥—É—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—Å—Ç—Ä–µ—á.
</–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏_–≤–∞–∂–Ω–∞—è_–∑–∞–¥–∞—á–∞>

{classification}

<—Å—Ç—Ä–æ–≥–∏–µ_—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è_–∫_–æ—Ç–≤–µ—Ç—É>
üö´ –°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù–û:
- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è  
- –î–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞
- –ü–∏—Å–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ (–¢–û–õ–¨–ö–û –†–£–°–°–ö–ò–ô!)
- –û–±—ä—è—Å–Ω—è—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã
- –î–æ–±–∞–≤–ª—è—Ç—å –ª–∏—à–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ '–ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç: "–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—á–∏—Ö –ø–ª–∞–Ω–æ–≤ –Ω–µ—Ç"'
- –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
- –ò–ó–ú–ï–ù–Ø–¢–¨ –í–†–ï–ú–Ø –ò–ó –û–†–ò–ì–ò–ù–ê–õ–ê!
‚úÖ –†–ê–ó–†–ï–®–ï–ù–û –¢–û–õ–¨–ö–û:
- –ß–∏—Å—Ç—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á –∏ –∑–∞–¥–∞—á –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï
- –û—Ç–≤–µ—Ç —Å—Ä–∞–∑—É –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
- –ó–∞–¥–∞—á–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ-—Ä—É—Å—Å–∫–∏ (–∑–∞–ø—É—Å—Ç–∏—Ç—å, —Å–æ–∑–¥–∞—Ç—å, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å)
- –¢–û–ß–ù–û–ï –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
</—Å—Ç—Ä–æ–≥–∏–µ_—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è_–∫_–æ—Ç–≤–µ—Ç—É>

<—Ç–æ—á–Ω—ã–π_—Ñ–æ—Ä–º–∞—Ç>
–í—Å—Ç—Ä–µ—á–∏:
‚Äî 13:00 ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
‚Äî 15:30 ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏  
‚Äî 18:00 ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏

–ó–∞–¥–∞—á–∏:
‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π –î–õ–ò–ù–ù–û–ï –¢–ò–†–ï (‚Äî) –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—ã—á–Ω–æ–µ —Ç–∏—Ä–µ (-) 
- "–ó–∞–¥–∞—á–∏:" –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –æ–¥–Ω–∞
- –í–°–ï –ó–ê–î–ê–ß–ò –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ª–∏—à–Ω–∏—Ö —Å—Ç—Ä–æ–∫ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
- –í–†–ï–ú–Ø –°–¢–†–û–ì–û –í –§–û–†–ú–ê–¢–ï –ß–ß:–ú–ú (13:00, –∞ –Ω–µ 13:30)
- –°–æ—Ä—Ç–∏—Ä—É–π –≤—Å—Ç—Ä–µ—á–∏ –∏ –∑–∞–¥–∞—á–∏ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏

–ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç: "–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—á–∏—Ö –ø–ª–∞–Ω–æ–≤ –Ω–µ—Ç"

–ù–ê–ß–ò–ù–ê–ô –û–¢–í–ï–¢ –°–†–ê–ó–£ –°–û –°–õ–û–í–ê "–í—Å—Ç—Ä–µ—á–∏:" –ë–ï–ó –†–ê–ó–ú–´–®–õ–ï–ù–ò–ô!
</—Ç–æ—á–Ω—ã–π_—Ñ–æ—Ä–º–∞—Ç>
""",

        "tomorrow_meetings": f"""
<—Ä–æ–ª—å>
–¢—ã ‚Äî —Å–≤–µ—Ä—Ö-—Ç–æ—á–Ω—ã–π —Ä–æ–±–æ—Ç-—Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–∞–Ω–æ–≤ –Ω–∞ {tomorrow_str}, {tomorrow_weekday}.
</—Ä–æ–ª—å>

<–∫–æ–Ω—Ç–µ–∫—Å—Ç_–¥–∞—Ç—ã>
- –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å: **{tomorrow_day_num} {tomorrow_month_genitive} ({tomorrow_weekday})**.
- –§–æ—Ä–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {tomorrow_str}.
</–∫–æ–Ω—Ç–µ–∫—Å—Ç_–¥–∞—Ç—ã>

{text_format}

<–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏_–≤–∞–∂–Ω–∞—è_–∑–∞–¥–∞—á–∞>
–ò–∑–≤–ª–µ–∫–∏ –ê–ë–°–û–õ–Æ–¢–ù–û –í–°–ï –≤—Å—Ç—Ä–µ—á–∏ –∏ –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –¥–∞—Ç–µ {tomorrow_str} (–∑–∞–≤—Ç—Ä–∞, {tomorrow_weekday}).
‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –î–õ–Ø –í–†–ï–ú–ï–ù–ò:
- "12 —á–∞—Å–æ–≤ —Ä–æ–≤–Ω–æ" ‚Üí –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—Ä–µ–æ–±—Ä–∞–∑—É–π –≤ "12:00"
- "15 —á–∞—Å–æ–≤ —Ä–æ–≤–Ω–æ" ‚Üí –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—Ä–µ–æ–±—Ä–∞–∑—É–π –≤ "15:00"
- "17 —á–∞—Å–æ–≤ 30 –º–∏–Ω—É—Ç" ‚Üí –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—Ä–µ–æ–±—Ä–∞–∑—É–π –≤ "17:30"
- –ù–ï –æ—Å—Ç–∞–≤–ª—è–π "—á–∞—Å–æ–≤ —Ä–æ–≤–Ω–æ" –≤ –æ—Ç–≤–µ—Ç–µ!
- –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
–ù–ï –ø—Ä–æ–ø—É—Å–∫–∞–π –Ω–∏ –æ–¥–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏ –∏–ª–∏ –∑–∞–¥–∞—á–∏!
–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π –í–ï–°–¨ —Ç–µ–∫—Å—Ç!
</–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏_–≤–∞–∂–Ω–∞—è_–∑–∞–¥–∞—á–∞>

{classification}

<—Ç–æ—á–Ω—ã–π_—Ñ–æ—Ä–º–∞—Ç>
–í—Å—Ç—Ä–µ—á–∏:
‚Äî 12:00 ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
‚Äî 15:00 ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
‚Äî 17:30 ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏

–ó–∞–¥–∞—á–∏:
‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π –î–õ–ò–ù–ù–û–ï –¢–ò–†–ï (‚Äî) –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—ã—á–Ω–æ–µ —Ç–∏—Ä–µ (-)
- "–ó–∞–¥–∞—á–∏:" –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –æ–¥–Ω–∞
- –í–†–ï–ú–Ø –¢–û–õ–¨–ö–û –í –§–û–†–ú–ê–¢–ï –ß–ß:–ú–ú (12:00, –ù–ï "12 —á–∞—Å–æ–≤ —Ä–æ–≤–Ω–æ")
- –°–æ—Ä—Ç–∏—Ä—É–π –≤—Å—Ç—Ä–µ—á–∏ –∏ –∑–∞–¥–∞—á–∏ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
- –ï—Å–ª–∏ –ø–ª–∞–Ω–æ–≤ –Ω–µ—Ç: "–ù–∞ –∑–∞–≤—Ç—Ä–∞ —Ä–∞–±–æ—á–∏—Ö –ø–ª–∞–Ω–æ–≤ –Ω–µ—Ç"

–ù–ê–ß–ò–ù–ê–ô –û–¢–í–ï–¢ –°–†–ê–ó–£ –°–û –°–õ–û–í–ê "–í—Å—Ç—Ä–µ—á–∏:" –ë–ï–ó –†–ê–ó–ú–´–®–õ–ï–ù–ò–ô!
</—Ç–æ—á–Ω—ã–π_—Ñ–æ—Ä–º–∞—Ç>
""",

        "last_week_meetings": f"""
<—Ä–æ–ª—å>
–¢—ã ‚Äî —Å—Ç—Ä–æ–≥–∏–π –∞—Ä—Ö–∏–≤–∞—Ä–∏—É—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –†–ê–ë–û–ß–ò–• —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞.
</—Ä–æ–ª—å>

<–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏_–≤–∞–∂–Ω–∞—è_–∑–∞–¥–∞—á–∞>
–ù–∞–π–¥–∏ —Å–æ–±—ã—Ç–∏—è –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é ({last_week_start} - {last_week_end}) –°–¢–†–û–ì–û –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞.
–ù–ï –í–´–î–£–ú–´–í–ê–ô —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ!
</–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏_–≤–∞–∂–Ω–∞—è_–∑–∞–¥–∞—á–∞>

{classification}

<—Å—Ç—Ä–æ–≥–∏–µ_–ø—Ä–∞–≤–∏–ª–∞_—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è>
–î–î.–ú–ú.–ì–ì–ì–ì, –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (üìå –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–ì–ì–ì –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏)
–í—Å—Ç—Ä–µ—á–∏:
‚Äî –ß–ß:–ú–ú ‚Äî –û–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
–ó–∞–¥–∞—á–∏:
‚Äî –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π –î–õ–ò–ù–ù–û–ï –¢–ò–†–ï (‚Äî) –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—ã—á–Ω–æ–µ —Ç–∏—Ä–µ (-)
- "–ó–∞–¥–∞—á–∏:" –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –æ–¥–Ω–∞
- –ì—Ä—É–ø–ø–∏—Ä—É–π —Å—Ç—Ä–æ–≥–æ –ø–æ –¥–∞—Ç–∞–º!
–°–æ—Ä—Ç–∏—Ä—É–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏!
- –ö–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ —Ä–∞–∑–º–µ—â–∞–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∞—Ç–µ
- –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –≤—Ç–æ—Ä–Ω–∏–∫, —Å—Ä–µ–¥–∞, —á–µ—Ç–≤–µ—Ä–≥, –ø—è—Ç–Ω–∏—Ü–∞, —Å—É–±–±–æ—Ç–∞, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
- –ï—Å–ª–∏ —Ä–∞–±–æ—á–∏—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç: "–ù–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ —Ä–∞–±–æ—á–∏—Ö –≤—Å—Ç—Ä–µ—á –Ω–µ –±—ã–ª–æ"
- –ù–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É —Å –¥–∞—Ç—ã, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π
- –ù–ï –¥–æ–±–∞–≤–ª—è–π —Å–æ–±—ã—Ç–∏—è –∏–∑ –ø–∞–º—è—Ç–∏ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
</—Å—Ç—Ä–æ–≥–∏–µ_–ø—Ä–∞–≤–∏–ª–∞_—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è>
"""
    }
    
    # üìå –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 'all' –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    if mode == "all":
        return prompts
    
    return prompts.get(mode, "")


class LLMClient:
    """Client for interacting with Ollama LLM service"""

    def __init__(self, config: LLMConfig):
        self.config = config
        self.logger = logging.getLogger(__name__)

    def check_connection(self) -> bool:
        """Check if Ollama service is available"""
        try:
            health_url = self.config.ollama_url.replace('/api/chat', '/api/tags')
            self.logger.debug(f"Checking Ollama availability: {health_url}")

            response = requests.get(health_url, timeout=10)
            is_available = response.status_code == 200

            if is_available:
                self.logger.info("‚úÖ Ollama is available and ready")
            else:
                self.logger.error(f"‚ùå Ollama unavailable: HTTP {response.status_code}")

            return is_available

        except requests.exceptions.ConnectionError:
            self.logger.error("‚ùå Cannot connect to Ollama (check if service is running)")
            return False
        except requests.exceptions.Timeout:
            self.logger.error("‚ùå Connection timeout to Ollama")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Unexpected error checking Ollama: {e}")
            return False

    def query(self, transcript: str, mode: str = "todo") -> str:
        """Query LLM for transcript analysis"""
        self.logger.info(f"üîç Starting transcript analysis in mode '{mode}'")
        
        # Validate input
        
        is_valid, error_msg = validate_input(transcript)
        if not is_valid:
            self.logger.error(f"‚ùå Validation error: {error_msg}")
            return f"‚ùå Validation error: {error_msg}"

        # Check service availability
        if not self.check_connection():
            self.logger.error("‚ùå Ollama unavailable")
            return "‚ùå Ollama unavailable. Check service startup."

        # Get prompts with correct dates from transcript
        # üìå –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ê–ö–¢–£–ê–õ–¨–ù–´–ï –¥–∞—Ç—ã –¥–ª—è 'today', 'tomorrow' –∏ 'last_week'
        prompt_text = get_prompts_with_dates(transcript, mode)
        if not prompt_text:
            available_modes = ["todo", "today_meetings", "tomorrow_meetings", "last_week_meetings"]
            self.logger.error(f"‚ùå Invalid mode: {mode}. Available: {available_modes}")
            return f"‚ùå Invalid analysis mode. Available modes: {available_modes}"

        # Preprocess transcript
        self.logger.debug("üîÑ Preprocessing transcript")
        preprocessed_transcript = preprocess_input(transcript)

        # Normalize dates
        transcript_year = extract_year_from_transcript(transcript)
        normalized_transcript = normalize_dates(preprocessed_transcript, transcript_year)

        # üìå –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è.
        # LLM —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        # –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –µ–≥–æ —Å–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç, —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–º–ø—Ç–µ.
        analysis_text = normalized_transcript
        
        # üìå –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –ü–û–°–õ–ï –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        if not analysis_text.strip():
            self.logger.warning("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –ø—É—Å—Ç –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏.")
            if mode == "today_meetings":
                return "–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—á–∏—Ö –ø–ª–∞–Ω–æ–≤ –Ω–µ—Ç"
            if mode == "tomorrow_meetings":
                return "–ù–∞ –∑–∞–≤—Ç—Ä–∞ —Ä–∞–±–æ—á–∏—Ö –ø–ª–∞–Ω–æ–≤ –Ω–µ—Ç"
            if mode == "last_week_meetings":
                return "–ù–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ —Ä–∞–±–æ—á–∏—Ö –≤—Å—Ç—Ä–µ—á –Ω–µ –±—ã–ª–æ"
            if mode == "todo":
                return "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
            return "–¢–µ–∫—Å—Ç –ø—É—Å—Ç, –∞–Ω–∞–ª–∏–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω." # –û–±—â–∏–π fallback

        # Build final prompt
        final_prompt = f"{prompt_text.strip()}\n\n<—Ç–µ–∫—Å—Ç_–¥–ª—è_–∞–Ω–∞–ª–∏–∑–∞>\n{analysis_text.strip()}\n</—Ç–µ–∫—Å—Ç_–¥–ª—è_–∞–Ω–∞–ª–∏–∑–∞>"

        # Build request payload
        params = LLM_PRESETS[self.config.preset]
        payload = {
            "model": self.config.model_name,
            "messages": [{"role": "user", "content": final_prompt}],
            "stream": False,
            **params
        }

        self.logger.info(f"ü§ñ Sending request to LLM (mode: {mode}, model: {self.config.model_name})")
        self.logger.debug(f"[LLM PAYLOAD]\n{json.dumps(payload, indent=2, ensure_ascii=False)}")

        # Execute request with error handling
        try:
            response = requests.post(self.config.ollama_url, json=payload, timeout=self.config.timeout)
            response.raise_for_status()
            result = response.json()
            raw_text = result.get("message", {}).get("content", "‚ö†Ô∏è Model returned no text.")

            self.logger.info(f"‚úÖ Received LLM response (length: {len(raw_text)} characters)")
            self.logger.debug(f"[RAW LLM RESPONSE]\n{raw_text}")

        except requests.exceptions.ConnectionError:
            error_msg = "Connection error to Ollama"
            self.logger.error(f"‚ùå {error_msg}")
            return f"‚ùå {error_msg}. Check service."
        except requests.exceptions.Timeout:
            error_msg = "Request timeout to LLM"
            self.logger.error(f"‚ùå {error_msg} (exceeded {self.config.timeout} seconds)")
            return f"‚ùå {error_msg}. Try with shorter text."
        except requests.exceptions.RequestException as e:
            error_msg = f"HTTP request error: {e}"
            self.logger.error(f"‚ùå {error_msg}")
            return f"‚ùå {error_msg}"
        except json.JSONDecodeError as e:
            error_msg = f"JSON parsing error: {e}"
            self.logger.error(f"‚ùå {error_msg}")
            return f"‚ùå {error_msg}"
        except KeyError as e:
            error_msg = f"Unexpected response structure: {e}"
            self.logger.error(f"‚ùå {error_msg}")
            return f"‚ùå {error_msg}"
        except Exception as e:
            error_msg = f"Unexpected error: {e}"
            self.logger.error(f"‚ùå {error_msg}")
            return f"‚ùå {error_msg}"

        # Clean and process response
        self.logger.debug("üßπ Cleaning and processing LLM response")
        sanitized_text = sanitize_llm_response(raw_text)

        self.logger.info(f"‚úÖ Analysis completed successfully (mode: {mode})")
        self.logger.debug(f"[FINAL RESULT]\n{sanitized_text}")

        return sanitized_text

    def query_with_retry(self, text: str, mode: str = "todo") -> str:
        """
        üìå –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø—Ä–æ—Å –∫ LLM —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏.
        –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–∞ –Ω–∞ —Ü–∏–∫–ª `while` –¥–ª—è –±–æ–ª—å—à–µ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏.
        """
        attempt = 0
        result = ""
        max_iterations = self.config.max_retries + 10  # Fallback to prevent theoretical infinite loop
        iteration = 0  # üìå –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        
        while attempt <= self.config.max_retries and iteration < max_iterations:
            iteration += 1
            if attempt > 0:
                self.logger.warning(
                    f"‚ùóÔ∏è LLM –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –Ω–æ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞. "
                    f"–ü–æ–≤—Ç–æ—Ä—è—é –∑–∞–ø—Ä–æ—Å... (–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{self.config.max_retries})"
                )
            
            result = self.query(text, mode)

            # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
            no_plans_phrases = ["–ø–ª–∞–Ω–æ–≤ –Ω–µ—Ç", "–≤—Å—Ç—Ä–µ—á –Ω–µ –±—ã–ª–æ", "–∑–∞–¥–∞—á –Ω–µ—Ç", "—Ä–∞–±–æ—á–∏—Ö –∑–∞–¥–∞—á –Ω–µ—Ç"]
            contains_meeting_words = any(word in text.lower() for word in
                                         ["–≤—Å—Ç—Ä–µ—á–∞", "–∑–∞–¥–∞—á", "—Å–æ–≤–µ—â–∞–Ω–∏–µ", "–ø–ª–∞–Ω", "–∑–≤–æ–Ω–æ–∫", "–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã", "–æ–±—Å—É–∂–¥–µ–Ω–∏–µ"])
            is_empty_response = any(phrase in result.lower() for phrase in no_plans_phrases)
            
            # –£—Å–ª–æ–≤–∏–µ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ü–∏–∫–ª–∞: –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π –ò–õ–ò –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤,
            # —Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—á–∏—Ç–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –∏ –≤—ã—Ö–æ–¥–∏–º.
            should_retry = (self.config.max_retries > 0 and 
                            is_empty_response and
                            contains_meeting_words and 
                            len(text) > 100)

            if not should_retry:
                break
            
            attempt += 1

        return result


# Global client instance
_config = LLMConfig(
    ollama_url=OLLAMA_URL,
    model_name=MODEL_NAME,
    preset=CURRENT_PRESET
)
_llm_client = LLMClient(_config)

# --- –§—É–Ω–∫—Ü–∏–∏ ---

def check_ollama_connection() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ Ollama"""
    return _llm_client.check_connection()

def query_llm(transcript: str, mode: str = "todo") -> str:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é LLM"""
    return _llm_client.query(transcript, mode)

def query_llm_with_retry(text: str, mode: str = "todo", retries: int = 2) -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ LLM —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    temp_config = LLMConfig(
        ollama_url=_llm_client.config.ollama_url,
        model_name=_llm_client.config.model_name,
        preset=_llm_client.config.preset,
        timeout=_llm_client.config.timeout,
        max_retries=retries
    )
    temp_client = LLMClient(temp_config)
    # –í—ã–∑—ã–≤–∞–µ–º —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å —Ü–∏–∫–ª–æ–º –≤–Ω—É—Ç—Ä–∏
    return temp_client.query_with_retry(text, mode)

def set_model(model_name: str):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ LLM"""
    global _llm_client
    _llm_client.config.model_name = model_name
    logger.info(f"üîÑ –ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {model_name}")

def get_model() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏ LLM"""
    return _llm_client.config.model_name

def set_preset(preset: str) -> bool:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Å–µ—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ LLM"""
    global _llm_client
    if preset in LLM_PRESETS:
        _llm_client.config.preset = preset
        logger.info(f"üîÑ –†–µ–∂–∏–º LLM —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {preset}")
        return True
    else:
        logger.warning(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ—Å–µ—Ç: {preset}")
        return False

# --- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ---

def analyze_todo(audio_text: str) -> str:
    """üìù –ß—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å?"""
    return query_llm_with_retry(audio_text, mode="todo")

def analyze_today(audio_text: str) -> str:
    """üë• –° –∫–µ–º —è —Å–µ–≥–æ–¥–Ω—è –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è?"""
    return query_llm_with_retry(audio_text, mode="today_meetings")

def analyze_tomorrow(audio_text: str) -> str:
    """üìÖ –ö–∞–∫–æ–π –ø–ª–∞–Ω –≤—Å—Ç—Ä–µ—á —É –º–µ–Ω—è –∑–∞–≤—Ç—Ä–∞?"""
    return query_llm_with_retry(audio_text, mode="tomorrow_meetings")

def analyze_last_week(audio_text: str) -> str:
    """üìä –ö–∞–∫–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –±—ã–ª–∏ –Ω–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ?"""
    return query_llm_with_retry(audio_text, mode="last_week_meetings")

# --- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ---
if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –±—É–¥—É—â–µ–π –¥–∞—Ç–æ–π
    future_text = """
    –ü–ª–∞–Ω –Ω–∞ –æ–∫—Ç—è–±—Ä—å 2025 –≥–æ–¥–∞.
    13 –æ–∫—Ç—è–±—Ä—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫. –í—Å—Ç—Ä–µ—á–∞ –≤ 9:00 —Å–æ–≤–µ—â–∞–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. 
    –í 14.30 –∑–≤–æ–Ω–æ–∫ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –ø–æ –ø—Ä–æ–µ–∫—Ç—É.
    –ó–∞–¥–∞—á–∞ - –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º.
    
    14 –æ–∫—Ç—è–±—Ä—è –≤—Ç–æ—Ä–Ω–∏–∫. –í—Å—Ç—Ä–µ—á–∞ –≤ 10:00 —Å HR –ø–æ –Ω–∞–π–º—É –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
    –ó–∞–¥–∞—á–∞ - –æ–±–Ω–æ–≤–∏—Ç—å CRM —Å–∏—Å—Ç–µ–º—É.
    
    15 –æ–∫—Ç—è–±—Ä—è —Å—Ä–µ–¥–∞. –í—Å—Ç—Ä–µ—á–∞ —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º –≤ 16:00.
    """
    
    print("ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –° –ë–£–î–£–©–ò–ú–ò –î–ê–¢–ê–ú–ò")
    print("=" * 60)
    
    print(f"üìã –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞—Ç—ã –æ–∫—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞")
    print(f"üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞): {datetime.now().strftime('%d.%m.%Y')}")
    print("=" * 60)
    
    print("\nüìã 1. –ß—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å? (–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞)")
    print("-" * 40)
    result = analyze_todo(future_text)
    print(result)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    if "10.2025" in result:
        print("\n‚úÖ –ì–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞!")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –≥–æ–¥–∞!")
        
    if "13.10.2025, –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" in result and "14.10.2025, –≤—Ç–æ—Ä–Ω–∏–∫" in result:
        print("‚úÖ –î–∞—Ç—ã –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –¥–∞—Ç!")

    # üìå –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ (—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞)
    print("\nüìã 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ '—Å–µ–≥–æ–¥–Ω—è' –∏ '–∑–∞–≤—Ç—Ä–∞' (–∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã)")
    print("-" * 40)
    
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ù–ï 13-15 –æ–∫—Ç—è–±—Ä—è 2025
    today_result = analyze_today(future_text)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç '–°–µ–≥–æ–¥–Ω—è': {today_result}")
    if "–ø–ª–∞–Ω–æ–≤ –Ω–µ—Ç" in today_result:
        print("‚úÖ '–°–µ–≥–æ–¥–Ω—è' –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–µ—Ä–Ω—É–ª '–Ω–µ—Ç –ø–ª–∞–Ω–æ–≤' (—Ç.–∫. –¥–∞—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º '—Å–µ–≥–æ–¥–Ω—è')")
    else:
        print("‚ùå '–°–µ–≥–æ–¥–Ω—è' –≤–µ—Ä–Ω—É–ª —Å–æ–±—ã—Ç–∏—è, —Ö–æ—Ç—è –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª!")
        
    tomorrow_result = analyze_tomorrow(future_text)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç '–ó–∞–≤—Ç—Ä–∞': {tomorrow_result}")
    if "–ø–ª–∞–Ω–æ–≤ –Ω–µ—Ç" in tomorrow_result:
        print("‚úÖ '–ó–∞–≤—Ç—Ä–∞' –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–µ—Ä–Ω—É–ª '–Ω–µ—Ç –ø–ª–∞–Ω–æ–≤' (—Ç.–∫. –¥–∞—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º '–∑–∞–≤—Ç—Ä–∞')")
    else:
        print("‚ùå '–ó–∞–≤—Ç—Ä–∞' –≤–µ—Ä–Ω—É–ª —Å–æ–±—ã—Ç–∏—è, —Ö–æ—Ç—è –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª!")